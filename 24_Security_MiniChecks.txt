SELECT NULL CURRENT_STATE, NULL SEVERITY, NULL RECOMMENDATIONS, NULL COMMAND FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL CURRENT_STATE, NULL SEVERITY, NULL RECOMMENDATIONS, NULL COMMAND FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT
    'YELLOW' MIN_SEVERITY_FOR_DISPLAY             /* GREEN -> show all; YELLOW -> show YELLOW and RED, RED -> show red */
  FROM
    DUAL
),
PARAM_SET_RECOMMENDATIONS AS
( SELECT
    'AUDIT_SYS_OPERATIONS' PARAMETER, 'TRUE' VALUE, 'YELLOW' SEVERITY
  FROM
    DUAL
),
PARAM_UNSET_RECOMMENDATIONS AS
( SELECT 'O7_DICTIONARY_ACCESSIBILITY' PARAMETER, 'YELLOW' SEVERITY FROM DUAL UNION ALL
  ( SELECT 'OS_ROLES', 'YELLOW' FROM DUAL ) UNION ALL
  ( SELECT 'REMOTE_OS_AUTHENT', 'RED' FROM DUAL ) UNION ALL
  ( SELECT 'REMOTE_OS_ROLES', 'YELLOW' FROM DUAL ) UNION ALL
  ( SELECT 'SEC_CASE_SENSITIVE_LOGON', 'YELLOW' FROM DUAL ) UNION ALL
  ( SELECT 'SEC_RETURN_SERVER_RELEASE_BANNER', 'YELLOW' FROM DUAL ) UNION ALL
  ( SELECT '_TRACE_FILES_PUBLIC', 'YELLOW' FROM DUAL ) UNION ALL
  ( SELECT 'UTL_FILE_DIR', 'YELLOW' FROM DUAL ) 
),
PARAM_UNSPEC_RECOMMENDATIONS AS
( SELECT 'AUDIT_FILE_DEST' PARAMETER FROM DUAL UNION ALL
  ( SELECT 'AUDIT_TRAIL' PARAMETER FROM DUAL ) UNION ALL
  ( SELECT 'ENABLE_DDL_LOGGING' FROM DUAL ) UNION ALL
  ( SELECT 'SEC_MAX_FAILED_LOGIN_ATTEMPTS' FROM DUAL ) UNION ALL
  ( SELECT 'SEC_PROTOCOL_ERROR_FURTHER_ACTION' FROM DUAL ) UNION ALL
  ( SELECT 'SEC_PROTOCOL_ERROR_TRACE_ACTION' FROM DUAL )
),
AUDIT_PRIV_RECOMMENDATIONS AS
( SELECT 'ADMINISTER DATABASE TRIGGER' PRIVILEGE FROM DUAL UNION ALL
  ( SELECT 'ALTER ANY PROCEDURE' FROM DUAL ) UNION ALL
  ( SELECT 'ALTER ANY TABLE' FROM DUAL ) UNION ALL
  ( SELECT 'ALTER ANY TRIGGER' FROM DUAL ) UNION ALL
  ( SELECT 'ALTER DATABASE' FROM DUAL ) UNION ALL
  ( SELECT 'ALTER PROFILE' FROM DUAL ) UNION ALL
  ( SELECT 'ALTER SYSTEM' FROM DUAL ) UNION ALL
  ( SELECT 'ALTER TABLE' FROM DUAL ) UNION ALL
  ( SELECT 'ALTER TABLESPACE' FROM DUAL ) UNION ALL
  ( SELECT 'ALTER USER' FROM DUAL ) UNION ALL
  ( SELECT 'AUDIT SYSTEM' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE ANY JOB' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE ANY LIBRARY' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE ANY PROCEDURE' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE ANY TABLE' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE DATABASE LINK' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE EXTERNAL JOB' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE JOB' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE PUBLIC DATABASE LINK' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE PUBLIC SYNONYM' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE ROLE' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE SESSION' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE USER' FROM DUAL ) UNION ALL
  ( SELECT 'DROP ANY PROCEDURE' FROM DUAL ) UNION ALL
  ( SELECT 'DROP ANY TABLE' FROM DUAL ) UNION ALL
  ( SELECT 'DROP PROFILE' FROM DUAL ) UNION ALL
  ( SELECT 'DROP USER' FROM DUAL ) UNION ALL
  ( SELECT 'EXEMPT ACCESS POLICY' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT ANY OBJECT PRIVILEGE' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT ANY PRIVILEGE' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT ANY ROLE' FROM DUAL ) UNION ALL
  ( SELECT 'UNLIMITED TABLESPACE' FROM DUAL )
),
AUDIT_OBJ_RECOMMENDATIONS AS
( SELECT 'DBA_USERS' OBJECT_NAME, 'SELECT' ACTION FROM DUAL UNION ALL
  ( SELECT 'DBMS_AUDIT_MGMT', 'EXECUTE' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_FGA', 'EXECUTE' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_FILE_TRANSFER', 'EXECUTE' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_IJOB', 'EXECUTE' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_JOB', 'EXECUTE' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_RLS', 'EXECUTE' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_SCHEDULER', 'EXECUTE' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_XSTREAM_GG', 'EXECUTE' FROM DUAL ) UNION ALL
  ( SELECT 'KUPP$PROC', 'EXECUTE' FROM DUAL )
),
AUDIT_STMT_RECOMMENDATIONS AS
( SELECT 'CONTEXT' AUDIT_OPTION FROM DUAL UNION ALL
  ( SELECT 'DATABASE LINK' FROM DUAL ) UNION ALL
  ( SELECT 'DIRECTORY' FROM DUAL ) UNION ALL
  ( SELECT 'EXECUTE PROCEDURE' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT DIRECTORY' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT PROCEDURE' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT TABLE' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT TYPE' FROM DUAL ) UNION ALL
  ( SELECT 'PROFILE' FROM DUAL ) UNION ALL
  ( SELECT 'PUBLIC DATABASE LINK' FROM DUAL ) UNION ALL
  ( SELECT 'PUBLIC SYNONYM' FROM DUAL ) UNION ALL
  ( SELECT 'ROLE' FROM DUAL ) UNION ALL
  ( SELECT 'SYSTEM AUDIT' FROM DUAL ) UNION ALL
  ( SELECT 'SYSTEM GRANT' FROM DUAL ) UNION ALL
  ( SELECT 'TABLE' FROM DUAL ) UNION ALL
  ( SELECT 'TABLESPACE' FROM DUAL ) UNION ALL
  ( SELECT 'TRIGGER' FROM DUAL ) UNION ALL
  ( SELECT 'TYPE' FROM DUAL ) UNION ALL
  ( SELECT 'USER' FROM DUAL ) UNION ALL
  ( SELECT 'VIEW' FROM DUAL ) 
),
SAMPLE_ACCOUNTS AS
( SELECT 'BI' ACCOUNT FROM DUAL UNION ALL
  ( SELECT 'HR' FROM DUAL ) UNION ALL
  ( SELECT 'IX' FROM DUAL ) UNION ALL
  ( SELECT 'OE' FROM DUAL ) UNION ALL
  ( SELECT 'PM' FROM DUAL ) UNION ALL
  ( SELECT 'SCOTT' FROM DUAL ) UNION ALL
  ( SELECT 'SH' FROM DUAL )
),
USERS_TO_BE_LOCKED AS
( SELECT 'ANONYMOUS' USER_NAME FROM DUAL UNION ALL 
  ( SELECT 'APEX_PUBLIC_USER' FROM DUAL ) UNION ALL
  ( SELECT 'APEX_030200' FROM DUAL ) UNION ALL
  ( SELECT 'APPQOSSYS' FROM DUAL ) UNION ALL
  ( SELECT 'CTXSYS' FROM DUAL ) UNION ALL
  ( SELECT 'DBSNMP' FROM DUAL ) UNION ALL
  ( SELECT 'DIP' FROM DUAL ) UNION ALL
  ( SELECT 'DMSYS' FROM DUAL ) UNION ALL
  ( SELECT 'DVF' FROM DUAL ) UNION ALL
  ( SELECT 'DVSYS' FROM DUAL ) UNION ALL
  ( SELECT 'EXFSYS' FROM DUAL ) UNION ALL
  ( SELECT 'FLOWS_FILES' FROM DUAL ) UNION ALL
  ( SELECT 'LBACSYS' FROM DUAL ) UNION ALL
  ( SELECT 'MDDATA' FROM DUAL ) UNION ALL
  ( SELECT 'MDSYS' FROM DUAL ) UNION ALL
  ( SELECT 'MGMT_VIEW' FROM DUAL ) UNION ALL
  ( SELECT 'OLAPDBA' FROM DUAL ) UNION ALL
  ( SELECT 'OLAPSVR' FROM DUAL ) UNION ALL
  ( SELECT 'OLAPSYS' FROM DUAL ) UNION ALL
  ( SELECT 'ORACLE_OCM' FROM DUAL ) UNION ALL
  ( SELECT 'ORDDATA' FROM DUAL ) UNION ALL
  ( SELECT 'ORDPLUGINS' FROM DUAL ) UNION ALL
  ( SELECT 'ORDSYS' FROM DUAL ) UNION ALL
  ( SELECT 'OUTLN' FROM DUAL ) UNION ALL
  ( SELECT 'OWBSYS' FROM DUAL ) UNION ALL
  ( SELECT 'OWBSYS_AUDIT' FROM DUAL ) UNION ALL
  ( SELECT 'PERFSTAT' FROM DUAL ) UNION ALL
  ( SELECT 'SI_INFORMTN_SCHEMA' FROM DUAL ) UNION ALL
  ( SELECT 'SPATIAL_CSW_ADMIN_USR' FROM DUAL ) UNION ALL
  ( SELECT 'SPATIAL_WFS_ADMIN_USR' FROM DUAL ) UNION ALL
  ( SELECT 'SYSMAN' FROM DUAL ) UNION ALL
  ( SELECT 'SYSTEM' FROM DUAL ) UNION ALL
  ( SELECT 'TRACESVR' FROM DUAL ) UNION ALL
  ( SELECT 'TSMSYS' FROM DUAL ) UNION ALL
  ( SELECT 'WKPROXY' FROM DUAL ) UNION ALL
  ( SELECT 'WKSYS' FROM DUAL ) UNION ALL
  ( SELECT 'WMSYS' FROM DUAL ) UNION ALL
  ( SELECT 'XDB' FROM DUAL )
),
NO_PUBLIC_PRIVILEGES AS
( SELECT 'DBMS_ADVISOR' OBJECT_NAME FROM DUAL UNION ALL
  ( SELECT 'DBMS_AQADM_SYS' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_AQADM_SYSCALLS' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_BACKUP_RESTORE' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_CRYPTO' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_FILE_TRANSFER' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_IJOB' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_JAVA' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_JAVA_TEST' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_JOB' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_LDAP' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_LOB' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_OBFUSCATION_TOOLKIT' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_PRCTAQIM' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_RANDOM' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_REPCAT_SQL_UTL' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_SCHEDULER' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_SQL' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_STREAMS_ADM_UTL' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_STREAMS_RPC' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_SYS_SQL' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_XMLGEN' FROM DUAL ) UNION ALL
  ( SELECT 'DBMS_QMLQUERY' FROM DUAL ) UNION ALL
  ( SELECT 'HTTPURITYPE' FROM DUAL ) UNION ALL
  ( SELECT 'INITJVMAUX' FROM DUAL ) UNION ALL
  ( SELECT 'LTADM' FROM DUAL ) UNION ALL
  ( SELECT 'UTL_DBWS' FROM DUAL ) UNION ALL
  ( SELECT 'UTL_FILE' FROM DUAL ) UNION ALL
  ( SELECT 'UTL_HTTP' FROM DUAL ) UNION ALL
  ( SELECT 'UTL_INADDR' FROM DUAL ) UNION ALL
  ( SELECT 'UTL_ORAMTS' FROM DUAL ) UNION ALL
  ( SELECT 'UTL_TCP' FROM DUAL ) UNION ALL
  ( SELECT 'UTL_MAIL' FROM DUAL ) UNION ALL
  ( SELECT 'UTL_SMTP' FROM DUAL ) UNION ALL
  ( SELECT 'WWV_DBMS_SQL' FROM DUAL ) UNION ALL
  ( SELECT 'WWV_EXECUTE_IMMEDIATE' FROM DUAL )
),
NO_STANDARD_PRIVILEGES AS
( SELECT 'ALTER SYSTEM' PRIVILEGE FROM DUAL UNION ALL
  ( SELECT 'AUDIT SYSTEM' FROM DUAL ) UNION ALL
  ( SELECT 'BECOME USER' FROM DUAL ) UNION ALL
  ( SELECT 'CREATE LIBRARY' FROM DUAL ) UNION ALL
  ( SELECT 'EXEMPT ACCESS POLICY' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT ALL PRIVILEGES' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT ANY OBJECT PRIVILEGE' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT ANY PRIVILEGE' FROM DUAL ) UNION ALL
  ( SELECT 'GRANT ANY ROLE' FROM DUAL ) UNION ALL
  ( SELECT 'SELECT ANY DICTIONARY' FROM DUAL ) UNION ALL
  ( SELECT 'SELECT ANY TABLE' FROM DUAL ) 
),
SAP_STANDARD_USERS AS
( SELECT
    USERNAME USER_NAME
  FROM
    DBA_USERS
  WHERE
    USERNAME LIKE 'SAP%' OR USERNAME LIKE 'OPS$%'
)
SELECT
 R.*
FROM
( SELECT
    'Age of most recent Critical Patch U' || 'pdate: ' || CPU_AGE_MONTHS || ' months' CURRENT_STATE,
    CASE
      WHEN CPU_AGE_MONTHS <= 6 THEN  'GREEN'
      WHEN CPU_AGE_MONTHS <= 12 THEN 'YELLOW'
      ELSE 'RED'
    END SEVERITY,
    CASE
      WHEN CPU_AGE_MONTHS <= 6 THEN ' '
      ELSE 'Implement a current SAP Bundle Patch'
    END RECOMMENDATIONS,
    ' ' COMMAND
  FROM
  ( SELECT
      CPU_AGE_MONTHS
    FROM
    ( SELECT
        MIN(MONTH_NUM_CURRENT - MONTH_NUM_CPU) CPU_AGE_MONTHS
      FROM
      ( SELECT
          TO_CHAR(SYSDATE, 'YYYY') * 12 + TO_CHAR(SYSDATE, 'MM') MONTH_NUM_CURRENT,
          SUBSTR(COMMENTS, INSTR(COMMENTS, 'containing CPU') + 17, 4) * 12 +
          DECODE(SUBSTR(COMMENTS, INSTR(COMMENTS, 'containing CPU') + 14, 3),
            'Jan', 1, 'Feb', 2, 'Mar', 3, 'Apr', 4, 'May', 5, 'Jun', 6, 'Jul', 7, 
            'Aug', 8, 'Sep', 9, 'Oct', 10, 'Nov', 11, 'Dec', 12) MONTH_NUM_CPU
        FROM
          DBA_REGISTRY_HISTORY
        WHERE
          COMMENTS LIKE '%containing CPU%'
      )
    )
    WHERE
      CPU_AGE_MONTHS IS NOT NULL
  )
  UNION ALL
  ( SELECT
      'No Critical Patch U' || 'pdate recorded in DBA_REGISTRY_HISTORY',
      'RED',
      'Implement a current SAP Bundle Patch',
      ' '
    FROM
    ( SELECT
        COUNT(*) NUM_CPUS
      FROM
        DBA_REGISTRY_HISTORY
      WHERE
        COMMENTS LIKE '%containing CPU%'
    )
    WHERE NUM_CPUS = 0
  )
  UNION ALL
  ( SELECT
      'Tablespace ' || TABLESPACE_NAME || ' is encrypted',
      'GREEN',
      ' ',
      ' '
    FROM
      DBA_TABLESPACES
    WHERE
      ENCRYPTED = 'YES'
  )
  UNION ALL
  ( SELECT
      'Column ' || COLUMN_NAME || ' of table ' || TABLE_NAME || ' is encrypted',
      'GREEN',
      ' ',
      ' '
    FROM
      DBA_ENCRYPTED_COLUMNS
  )
  UNION ALL
  ( SELECT
      'Parameter ' || PR.PARAMETER || ' set to ' || P.VALUE,
      DECODE(UPPER(P.VALUE), PR.VALUE, 'GREEN', PR.SEVERITY),
      DECODE(UPPER(P.VALUE), PR.VALUE, ' ',
        'Set ' || PR.PARAMETER || ' to ' || PR.VALUE),
      DECODE(UPPER(P.VALUE), PR.VALUE, ' ',
        'ALTER SYSTEM SET "' || PR.PARAMETER || '"=' || PR.VALUE || ' SCOPE=SPFILE;')
    FROM
      PARAM_SET_RECOMMENDATIONS PR,
      V$PARAMETER P
    WHERE
      UPPER(P.NAME) = PR.PARAMETER
  )
  UNION ALL
  ( SELECT
      'Parameter ' || PR.PARAMETER || ' not set',
      PR.SEVERITY,
      'Set ' || PR.PARAMETER || ' to ' || PR.VALUE,
      'ALTER SYSTEM SET "' || PR.PARAMETER || '"=' || PR.VALUE || ' SCOPE=SPFILE;'
    FROM
      PARAM_SET_RECOMMENDATIONS PR
    WHERE
      NOT EXISTS ( SELECT 1 FROM V$PARAMETER P WHERE UPPER(P.NAME) = PR.PARAMETER )
  )
  UNION ALL
  ( SELECT
      'Parameter ' || PR.PARAMETER || ' set to ' || P.VALUE,
      PR.SEVERITY,
      'Unset ' || PR.PARAMETER || DECODE(PR.PARAMETER, 'REMOTE_OS_AUTHENT', ' and use SSFS instead'),
      'ALTER SYSTEM RESET "' || PR.PARAMETER || '" SCOPE=SPFILE;'
    FROM
      PARAM_UNSET_RECOMMENDATIONS PR,
      V$PARAMETER P
    WHERE
      UPPER(P.NAME) = PR.PARAMETER AND
      P.ISDEFAULT = 'FALSE'
  )
  UNION ALL
  ( SELECT
      'Parameter ' || PR.PARAMETER || ' not set',
      'GREEN',
      ' ',
      ' '
    FROM
      PARAM_UNSET_RECOMMENDATIONS PR,
      V$PARAMETER P
    WHERE
      UPPER(P.NAME) = PR.PARAMETER AND
      P.ISDEFAULT = 'TRUE'
  )
  UNION ALL
  ( SELECT
      'Parameter ' || PR.PARAMETER || ' not set',
      'GREEN',
      ' ',
      ' '
    FROM
      PARAM_UNSET_RECOMMENDATIONS PR
    WHERE
      NOT EXISTS ( SELECT 1 FROM V$PARAMETER P WHERE UPPER(P.NAME) = PR.PARAMETER )
  )
  UNION ALL
  ( SELECT
      'Parameter ' || PR.PARAMETER || ' set to ' || P.VALUE,
      'GREEN',
      'Various settings possible',
      ' '
    FROM
      PARAM_UNSPEC_RECOMMENDATIONS PR,
      V$PARAMETER P
    WHERE
      UPPER(P.NAME) = PR.PARAMETER
  )
  UNION ALL
  ( SELECT
      'Size of AUD$ table is ' || ROUND(BYTES / 1024 / 1024) || ' MB',
      CASE WHEN BYTES < 1000000000 THEN 'GREEN' ELSE 'YELLOW' END,
      CASE WHEN BYTES < 1000000000 THEN ' ' ELSE 'Implement house keeping for AUD$ table' END,
      ' '
    FROM
      DBA_SEGMENTS
    WHERE
      OWNER = 'SYS' AND
      SEGMENT_NAME = 'AUD$'
  )
  UNION ALL
  ( SELECT
      'Auditing active for ' || A.PRIVILEGE,
      'GREEN',
      ' ',
      ' '
    FROM
      AUDIT_PRIV_RECOMMENDATIONS AR,
      DBA_PRIV_AUDIT_OPTS A
    WHERE
      A.PRIVILEGE = AR.PRIVILEGE AND
      A.USER_NAME IS NULL
  )
  UNION ALL
  ( SELECT
      'No auditing for ' || AR.PRIVILEGE,
      'YELLOW',
      'Activate auditing for ' || AR.PRIVILEGE,
      'AUDIT ' || AR.PRIVILEGE || ';'
    FROM
      AUDIT_PRIV_RECOMMENDATIONS AR
    WHERE
      NOT EXISTS ( SELECT 1 FROM DBA_PRIV_AUDIT_OPTS A WHERE A.PRIVILEGE = AR.PRIVILEGE AND A.USER_NAME IS NULL )
  )
  UNION ALL
  ( SELECT
      'Auditing active for ' || AR.ACTION || ' ON ' || AR.OBJECT_NAME,
      'GREEN',
      ' ',
      ' '
    FROM
      AUDIT_OBJ_RECOMMENDATIONS AR,
      DBA_OBJ_AUDIT_OPTS A
    WHERE
      A.OBJECT_NAME = AR.OBJECT_NAME AND
      ( AR.ACTION = 'SELECT' AND A.SEL = 'S/S' OR
        AR.ACTION = 'EXECUTE' AND A.EXE = 'S/S' )
  )
  UNION ALL
  ( SELECT
      'No auditing for ' || AR.ACTION || ' ON ' || AR.OBJECT_NAME,
      'YELLOW',
      'Activate auditing for ' || AR.ACTION || ' ON ' || AR.OBJECT_NAME,
      'AUDIT ' || AR.ACTION || ' ON ' || AR.OBJECT_NAME || ';'
    FROM
      AUDIT_OBJ_RECOMMENDATIONS AR
    WHERE
      NOT EXISTS 
      ( SELECT
          1
        FROM
          AUDIT_OBJ_RECOMMENDATIONS AR2,
          DBA_OBJ_AUDIT_OPTS A
        WHERE
          AR2.OBJECT_NAME = AR.OBJECT_NAME AND
          A.OBJECT_NAME = AR2.OBJECT_NAME AND
          ( AR2.ACTION = 'SELECT' AND A.SEL = 'S/S' OR
            AR2.ACTION = 'EXECUTE' AND A.EXE = 'S/S' )
      )
  )
  UNION ALL
  ( SELECT
      'Auditing active for ' || A.AUDIT_OPTION,
      'GREEN',
      ' ',
      ' '
    FROM
      AUDIT_STMT_RECOMMENDATIONS AR,
      DBA_STMT_AUDIT_OPTS A
    WHERE
      A.AUDIT_OPTION = AR.AUDIT_OPTION AND
      A.USER_NAME IS NULL
  )
  UNION ALL
  ( SELECT
      'No auditing for ' || AR.AUDIT_OPTION,
      'YELLOW',
      'Activate auditing for ' || AR.AUDIT_OPTION,
      'AUDIT ' || AR.AUDIT_OPTION || ';'
    FROM
      AUDIT_STMT_RECOMMENDATIONS AR
    WHERE
      NOT EXISTS ( SELECT 1 FROM DBA_STMT_AUDIT_OPTS A WHERE A.AUDIT_OPTION = AR.AUDIT_OPTION AND A.USER_NAME IS NULL )
  )
  UNION ALL
  ( SELECT
      'Oracle sample account ' || S.ACCOUNT || ' exists',
      'YELLOW',
      'Drop Oracle sample account ' || S.ACCOUNT,
      'DROP USER ' || S.ACCOUNT || ' CASCADE;'
    FROM
      DBA_USERS U,
      SAMPLE_ACCOUNTS S
    WHERE
      U.USERNAME = S.ACCOUNT
  )
/* ORA-00942 on DBA_USERS_WITH_DEFPWD with SELECT_CATALOG_ROLE for security reasons
  UNION ALL
  ( SELECT
      'Password for user ' || USERNAME || ' is still default',
      'YELLOW',
      'Set a different password for ' || USERNAME,
      'ALTER USER ' || USERNAME || ' IDENTIFIED BY <new_password>;'
    FROM
      DBA_USERS_WITH_DEFPWD
  )
  UNION ALL
  ( SELECT
      'Password for user ' || U.USERNAME || ' is not Oracle default',
      'GREEN',
      ' ',
      ' '
    FROM
      DBA_USERS U
    WHERE
      NOT EXISTS ( SELECT 1 FROM DBA_USERS_WITH_DEFPWD UD WHERE UD.USERNAME = U.USERNAME )
  )
*/
  UNION ALL
  ( SELECT
      'User ' || U.USERNAME || ' is not locked',
      'YELLOW',
      'Lock user ' || U.USERNAME || ' if possible',
      'ALTER USER ' || U.USERNAME || ' ACCOUNT LOCK;'
    FROM
      DBA_USERS U,
      USERS_TO_BE_LOCKED UL
    WHERE
      U.ACCOUNT_STATUS NOT LIKE '%LOCKED%' AND
      U.USERNAME = UL.USER_NAME
  )
  UNION ALL
  ( SELECT
      'User ' || U.USERNAME || ' is locked',
      'GREEN',
      ' ',
      ' '
    FROM
      DBA_USERS U,
      USERS_TO_BE_LOCKED UL
    WHERE
      U.ACCOUNT_STATUS LIKE '%LOCKED%' AND
      U.USERNAME = UL.USER_NAME
  )
  UNION ALL
  ( SELECT
      'Unknown user ' || USERNAME || ' exists',
      'YELLOW',
      'Check if you can drop user ' || USERNAME,
      'DROP USER ' || USERNAME || ' CASCADE;'
    FROM
      DBA_USERS
    WHERE
      USERNAME NOT IN ( SELECT USER_NAME FROM SAP_STANDARD_USERS ) AND
      USERNAME NOT IN ( SELECT USER_NAME FROM USERS_TO_BE_LOCKED ) AND
      USERNAME NOT IN ( SELECT ACCOUNT FROM SAMPLE_ACCOUNTS ) AND
      USERNAME != 'SYS'
  )
  UNION ALL
  ( SELECT
      'Profile SAPUPROF not used for user ' || USERNAME,
      'YELLOW',
      'Implement profile SAPUPROF (SAP Note 1519872)',
      ' '
    FROM
      DBA_USERS
    WHERE
      USERNAME LIKE 'SAP%' AND
      PROFILE != 'SAPUPROF'
  )
  UNION ALL
  ( SELECT
      'Password verify function not used for profile ' || P.PROFILE,
      'YELLOW',
      'Implement password verify function for profile ' || P.PROFILE || ' (SAP Note 1522952)',
      ' '
    FROM
      DBA_PROFILES P,
      ( SELECT LIMIT DEF_LIMIT FROM DBA_PROFILES WHERE PROFILE = 'DEFAULT' AND RESOURCE_NAME = 'PASSWORD_VERIFY_FUNCTION' ) DL
    WHERE
      RESOURCE_NAME = 'PASSWORD_VERIFY_FUNCTION' AND
      ( LIMIT = 'NULL' OR LIMIT = 'DEFAULT' AND DL.DEF_LIMIT = 'NULL' )
  )
  UNION ALL
  ( SELECT
      'Password verify function used for profile ' || P.PROFILE,
      'GREEN',
      ' ',
      ' '
    FROM
      DBA_PROFILES P,
      ( SELECT LIMIT DEF_LIMIT FROM DBA_PROFILES WHERE PROFILE = 'DEFAULT' AND RESOURCE_NAME = 'PASSWORD_VERIFY_FUNCTION' ) DL
    WHERE
      RESOURCE_NAME = 'PASSWORD_VERIFY_FUNCTION' AND
      ( LIMIT NOT IN ( 'NULL', 'DEFAULT' ) OR LIMIT = 'DEFAULT' AND DL.DEF_LIMIT != 'NULL' )
  )
  UNION ALL
  ( SELECT
      'Privilege EXECUTE ON ' || NP.OBJECT_NAME || ' granted to PUBLIC',
      'YELLOW',
      'Revoke privilege ' || NP.OBJECT_NAME || ' from PUBLIC',
      'REVOKE EXECUTE ON ' || NP.OBJECT_NAME || ' FROM PUBLIC;'
    FROM
      NO_PUBLIC_PRIVILEGES NP,
      DBA_TAB_PRIVS P
    WHERE
      P.GRANTEE = 'PUBLIC' AND
      NP.OBJECT_NAME = P.TABLE_NAME AND
      P.PRIVILEGE = 'EXECUTE'
  )
  UNION ALL
  ( SELECT
      'Privilege EXECUTE ON ' || NP.OBJECT_NAME || ' not granted to PUBLIC',
      'GREEN',
      ' ',
      ' '
    FROM
      NO_PUBLIC_PRIVILEGES NP
    WHERE
      NOT EXISTS ( SELECT 1 FROM DBA_TAB_PRIVS P WHERE P.GRANTEE = 'PUBLIC' AND NP.OBJECT_NAME = P.TABLE_NAME AND P.PRIVILEGE = 'EXECUTE' )
  )
  UNION ALL
  ( SELECT
      'Privilege ' || NP.PRIVILEGE || ' granted to ' || P.GRANTEE,
      'YELLOW',
      'Revoke privilege ' || NP.PRIVILEGE || ' from ' || P.GRANTEE,
      'REVOKE ' || NP.PRIVILEGE || ' FROM ' || P.GRANTEE || ';'
    FROM
      SAP_STANDARD_USERS U,
      NO_STANDARD_PRIVILEGES NP,
      DBA_SYS_PRIVS P
    WHERE
      U.USER_NAME = P.GRANTEE AND
      NP.PRIVILEGE = P.PRIVILEGE 
  )
  UNION ALL
  ( SELECT
      'Privilege ' || NP.PRIVILEGE || ' not granted to ' || U.USER_NAME,
      'GREEN',
      ' ',
      ' '
    FROM
      SAP_STANDARD_USERS U,
      NO_STANDARD_PRIVILEGES NP
    WHERE
      NOT EXISTS ( SELECT 1 FROM DBA_SYS_PRIVS P WHERE P.GRANTEE = U.USER_NAME AND P.PRIVILEGE = NP.PRIVILEGE )
  )
  UNION ALL
  ( SELECT
      'Privilege ' || TP.PRIVILEGE || ' ON ' || TP.TABLE_NAME || ' granted to ' || TP.GRANTEE || ' with GRANT option',
      'YELLOW',
      'Disable GRANT option',
      'REVOKE ' || TP.PRIVILEGE || ' ON ' || TP.TABLE_NAME || ' FROM ' || TP.GRANTEE || '; GRANT ' || 
        TP.PRIVILEGE || ' ON ' || TP.TABLE_NAME || ' TO ' || TP.GRANTEE || ';'
    FROM
      SAP_STANDARD_USERS U,
      DBA_TAB_PRIVS TP
    WHERE
      U.USER_NAME = TP.GRANTEE AND
      TP.GRANTABLE = 'YES'
  )    
  UNION ALL
  ( SELECT
      'Privilege ' || SP.PRIVILEGE || ' granted to ' || SP.GRANTEE || ' with ADMIN option',
      'YELLOW',
      'Disable ADMIN option',
      'REVOKE ' || SP.PRIVILEGE || ' FROM ' || SP.GRANTEE || '; GRANT ' || 
        SP.PRIVILEGE || ' TO ' || SP.GRANTEE || ';'
    FROM
      SAP_STANDARD_USERS U,
      DBA_SYS_PRIVS SP
    WHERE
      U.USER_NAME = SP.GRANTEE AND
      SP.ADMIN_OPTION = 'YES'
  )    
  UNION ALL
  ( SELECT
      'Role ' || RP.GRANTED_ROLE || ' granted to ' || RP.GRANTEE || ' with ADMIN option',
      'YELLOW',
      'Disable ADMIN option',
      'REVOKE ' || RP.GRANTED_ROLE || ' FROM ' || RP.GRANTEE || '; GRANT ' || 
        RP.GRANTED_ROLE || ' TO ' || RP.GRANTEE || ';'
    FROM
      SAP_STANDARD_USERS U,
      DBA_ROLE_PRIVS RP
    WHERE
      U.USER_NAME = RP.GRANTEE AND
      RP.ADMIN_OPTION = 'YES'
  )
  UNION ALL
  ( SELECT
      'Role DBA granted to ' || U.USER_NAME,
      'RED',
      'Revoke DBA role from ' || U.USER_NAME,
      'REVOKE DBA FROM ' || U.USER_NAME || ';'
    FROM
      SAP_STANDARD_USERS U,
      DBA_ROLE_PRIVS RP
    WHERE
      U.USER_NAME = RP.GRANTEE AND
      RP.GRANTED_ROLE = 'DBA'
  )
  UNION ALL
  ( SELECT
      'Role ' || RP.GRANTED_ROLE || ' granted to ' || U.USER_NAME,
      'YELLOW',
      'Revoke ' || RP.GRANTED_ROLE || ' role from ' || U.USER_NAME,
      'REVOKE ' || RP.GRANTED_ROLE || ' FROM ' || U.USER_NAME || ';'
    FROM
      SAP_STANDARD_USERS U,
      DBA_ROLE_PRIVS RP
    WHERE
      U.USER_NAME = RP.GRANTEE AND
      RP.GRANTED_ROLE IN ( 'CONNECT', 'RESOURCE' )
  )
  UNION ALL
  ( SELECT
      'Role SAPDBA granted to ' || U.USERNAME,
      'GREEN',
      ' ',
      ' '
    FROM
      DBA_USERS U,
      DBA_ROLE_PRIVS RP
    WHERE
      U.USERNAME LIKE 'OPS$%' AND
      U.USERNAME = RP.GRANTEE AND
      RP.GRANTED_ROLE = 'SAPDBA'
  )
  UNION ALL
  ( SELECT
      'Role SAPDBA not granted to ' || U.USERNAME,
      'YELLOW',
      'Grant role SAPDBA to ' || U.USERNAME || ' (SAP Notes 834917, 134592)',
      'GRANT SAPDBA TO ' || U.USERNAME || ';'
    FROM
      DBA_USERS U
    WHERE
      U.USERNAME LIKE 'OPS$%' AND
      NOT EXISTS ( SELECT 1 FROM DBA_ROLE_PRIVS RP WHERE U.USERNAME = RP.GRANTEE AND RP.GRANTED_ROLE = 'SAPDBA')
  )
  UNION ALL
  ( SELECT
      'Role SAPCONN granted to ' || U.USERNAME,
      'GREEN',
      ' ',
      ' '
    FROM
      DBA_USERS U,
      DBA_ROLE_PRIVS RP
    WHERE
      U.USERNAME LIKE 'SAP%' AND
      U.USERNAME = RP.GRANTEE AND
      RP.GRANTED_ROLE = 'SAPCONN'
  )
  UNION ALL
  ( SELECT
      'Role SAPCONN not granted to ' || U.USERNAME,
      'YELLOW',
      'Grant role SAPCONN to ' || U.USERNAME || ' (SAP Note 834917)',
      'GRANT SAPCONN TO ' || U.USERNAME || ';'
    FROM
      DBA_USERS U
    WHERE
      U.USERNAME LIKE 'SAP%' AND
      NOT EXISTS ( SELECT 1 FROM DBA_ROLE_PRIVS RP WHERE U.USERNAME = RP.GRANTEE AND RP.GRANTED_ROLE = 'SAPCONN')
  )
  UNION ALL
  ( SELECT
      'Role SAPCONN not granted to ' || U.USERNAME,
      'GREEN',
      ' ',
      ' '
    FROM
      DBA_USERS U
    WHERE
      U.USERNAME LIKE 'OPS$%' AND
      NOT EXISTS ( SELECT 1 FROM DBA_ROLE_PRIVS RP WHERE U.USERNAME = RP.GRANTEE AND RP.GRANTED_ROLE = 'SAPCONN')
  )
  UNION ALL
  ( SELECT
      'Role SAPCONN granted to ' || U.USERNAME,
      'YELLOW',
      'Revoke role SAPCONN from ' || U.USERNAME,
      'REVOKE SAPCONN FROM ' || U.USERNAME || ';'
    FROM
      DBA_USERS U,
      DBA_ROLE_PRIVS RP
    WHERE
      U.USERNAME LIKE 'OPS$%' AND
      U.USERNAME = RP.GRANTEE AND
      RP.GRANTED_ROLE = 'SAPCONN'
  )
  UNION ALL
  ( SELECT
      'Role SAPDBA not granted to ' || U.USERNAME,
      'GREEN',
      ' ',
      ' '
    FROM
      DBA_USERS U
    WHERE
      U.USERNAME LIKE 'SAP%' AND
      NOT EXISTS ( SELECT 1 FROM DBA_ROLE_PRIVS RP WHERE U.USERNAME = RP.GRANTEE AND RP.GRANTED_ROLE = 'SAPDBA')
  )
  UNION ALL
  ( SELECT
      'Role SAPDBA granted to ' || U.USERNAME,
      'YELLOW',
      'Revoke role SAPDBA from ' || U.USERNAME,
      'REVOKE SAPDBA FROM ' || U.USERNAME || ';'
    FROM
      DBA_USERS U,
      DBA_ROLE_PRIVS RP
    WHERE
      U.USERNAME LIKE 'SAP%' AND
      U.USERNAME = RP.GRANTEE AND
      RP.GRANTED_ROLE = 'SAPDBA'
  )
) R,
  BASIS_INFO BI
WHERE
  ( BI.MIN_SEVERITY_FOR_DISPLAY = 'GREEN' OR
    BI.MIN_SEVERITY_FOR_DISPLAY = 'YELLOW' AND R.SEVERITY IN ('YELLOW', 'RED') OR
    BI.MIN_SEVERITY_FOR_DISPLAY = 'RED' AND R.SEVERITY = 'RED' )
ORDER BY
  CURRENT_STATE
));  
