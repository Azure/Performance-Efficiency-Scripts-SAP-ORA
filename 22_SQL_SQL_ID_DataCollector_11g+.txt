SELECT
  /*+ OPT_PARAM('OPTIMIZER_DYNAMIC_SAMPLING', 6)
      OPT_PARAM('_COMPLEX_VIEW_MERGING', 'FALSE')
      OPT_PARAM('_CONNECT_BY_USE_UNION_ALL', 'FALSE')
      OPT_PARAM('_OPTIMIZER_CARTESIAN_ENABLED', 'FALSE')
      OPT_PARAM('_OPTIMIZER_COST_BASED_TRANSFORMATION', 'FALSE')
      OPT_PARAM('_OPTIMIZER_DISTINCT_AGG_TRANSFORM', 'FALSE')
      OPT_PARAM('_OPTIMIZER_GROUP_BY_PLACEMENT', 'FALSE')
      OPT_PARAM('_OPTIMIZER_JOIN_SEL_SANITY_CHECK', 'FALSE')
      OPT_PARAM('_OPTIMIZER_MJC_ENABLED', FALSE)
      OPT_PARAM('_OPTIMIZER_NEW_JOIN_CARD_COMPUTATION', 'FALSE')
      OPT_PARAM('_PUSH_JOIN_UNION_VIEW', 'FALSE')
      OPT_PARAM('_PUSH_JOIN_UNION_VIEW2', 'FALSE')
      OPT_PARAM('_PUSH_JOIN_PREDICATE', 'FALSE')
      OPT_PARAM('QUERY_REWRITE_ENABLED', 'FALSE')
  */
  SUBSTR(LINE, 1, 80) PART1,
  SUBSTR(LINE, 81, 80) PART2,
  SUBSTR(LINE, 161, 80) PART3
FROM (
( SELECT
NULL LINE FROM DUAL WHERE 1 = 0 )
UNION ALL
( SELECT NULL LINE FROM DUAL WHERE 1 = 0 )
UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    SQL_ID,
    SEGMENT_INFO,
    COMPLEX_INDEX_STATS,
    ASH_INFO,
    FRAGMENTATION_INFO,
    VIEW_INFO,
    INDEX_COLUMNS,
    COMPLEX_SQL_TEXT,
    AWR_BEGIN_DATE,
    AWR_END_DATE,
    INCLUDE_PREDICATES,
    NUM_CAPTURE_TIMES
  FROM
  ( SELECT
      -1 DBID,
      '<SQL_ID>' SQL_ID,                    /********** EDIT HERE 1/2; there is another one below ******************/
      'X' SEGMENT_INFO,
      ' ' COMPLEX_INDEX_STATS,
      'X' ASH_INFO,
      'X' FRAGMENTATION_INFO,
      'X' VIEW_INFO,
      'X' INDEX_COLUMNS,
      'X' COMPLEX_SQL_TEXT,
      'X' INCLUDE_PREDICATES,
      SYSDATE - 43 AWR_BEGIN_DATE,
      SYSDATE AWR_END_DATE,
      5 NUM_CAPTURE_TIMES
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT /*+ MATERIALIZE */
    MIN(SS.SNAP_ID) BEGIN_SNAP_ID,
    MIN(SS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
    MAX(SS.SNAP_ID) END_SNAP_ID,
    MAX(SS.END_INTERVAL_TIME) END_TIME,
    SUM(TO_CHAR(SS.END_INTERVAL_TIME, 'SSSSS') -
      TO_CHAR(SS.BEGIN_INTERVAL_TIME, 'SSSSS') +
      86400 * (TO_CHAR(SS.END_INTERVAL_TIME, 'J') -
               TO_CHAR(SS.BEGIN_INTERVAL_TIME, 'J')))
      SECONDS
  FROM
    DBA_HIST_SNAPSHOT SS,
    BASIS_INFO BI
  WHERE
    SS.DBID = BI.DBID AND
    SS.BEGIN_INTERVAL_TIME >= BI.AWR_BEGIN_DATE AND
    SS.END_INTERVAL_TIME <= BI.AWR_END_DATE
),
OBJECTS AS
( SELECT /*+ MATERIALIZE */
    OWNER,
    OBJECT_NAME,
    SUBOBJECT_NAME,
    OBJECT_TYPE,
    OBJECT_ID,
    DATA_OBJECT_ID,
    CREATED,
    LAST_DDL_TIME
  FROM
    DBA_OBJECTS
),
SQL_TEXT AS
( SELECT /*+ MATERIALIZE */
    SQL_TEXT,
    LENGTH(SQL_TEXT) LENGTH,
    LENGTH(REGEXP_REPLACE(SQL_TEXT, '[^ ]', '')) NUM_BLANKS,
    LENGTH(REGEXP_REPLACE(SQL_TEXT, '[^,]', '')) NUM_COMMA
  FROM
  ( SELECT
      REPLACE(REPLACE(REPLACE(SQL_TEXT, CHR(10), NULL), CHR(9), NULL), CHR(0), NULL) SQL_TEXT
    FROM
    ( SELECT DISTINCT
        LISTAGG(SQL_TEXT) WITHIN GROUP (ORDER BY PIECE) OVER () SQL_TEXT
      FROM
      ( SELECT
          ST.SQL_TEXT,
          ST.PIECE
        FROM
          BASIS_INFO BI,
          V$SQLTEXT ST
        WHERE
          ST.SQL_ID = BI.SQL_ID
        UNION ALL
        ( SELECT
            TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 3264)) SQL_TEXT,
            1 PIECE
          FROM
            BASIS_INFO BI,
            DBA_HIST_SQLTEXT HST
          WHERE
            HST.DBID = BI.DBID AND
            HST.SQL_ID = BI.SQL_ID AND
            NOT EXISTS
            ( SELECT
                1
              FROM
                BASIS_INFO BI,
                V$SQLSTATS SS
              WHERE
                SS.SQL_ID = BI.SQL_ID
            )
        )
      )
      WHERE
        PIECE <= 50
    )
    WHERE
      SQL_TEXT IS NOT NULL
  )
),
START_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    DECODE(ROWNUM,
      1, 1,
      NUM_BLANKS + 2, LENGTH + 1,
      INSTR(STL.SQL_TEXT, ' ', 1, ROWNUM - 1) + 1) POS
  FROM
    BASIS_INFO BI,
    SQL_TEXT STL,
    ( SELECT 1 FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <=
      ( SELECT NUM_BLANKS + 2 FROM SQL_TEXT)
    )
  WHERE
    BI.COMPLEX_SQL_TEXT = 'X'
  UNION
  ( SELECT /*+ MATERIALIZE */
      DECODE(ROWNUM,
        1, 1,
        NUM_COMMA + 2, LENGTH + 1,
        INSTR(STL.SQL_TEXT, ',', 1, ROWNUM - 1) + 1) POS
    FROM
      BASIS_INFO BI,
      SQL_TEXT STL,
      ( SELECT 1 FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <=
        ( SELECT NUM_COMMA + 2 FROM SQL_TEXT)
      )
    WHERE
      BI.COMPLEX_SQL_TEXT = 'X'
  )
),
START_END_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    POS1,
    NVL(POS2, POS_OVERFLOW) POS2
  FROM
  ( SELECT
      SP1.POS POS1,
      MAX(SP2.POS) POS2,
      MIN(SP3.POS) POS_OVERFLOW
    FROM
      START_POSITIONS SP1,
      START_POSITIONS SP2,
      START_POSITIONS SP3
    WHERE
      SP2.POS (+) BETWEEN SP1.POS + 1 AND SP1.POS + 80 AND
      SP3.POS > SP1.POS
    GROUP BY
      SP1.POS
  )
),
START_END_LINE_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    POS1,
    POS2
  FROM
    START_END_POSITIONS
  START WITH
    POS1 = 1
  CONNECT BY PRIOR
    POS2 = POS1
  UNION ALL
  ( SELECT
      (R.ROWNUMBER - 1) * 80 + 1 POS1,
      R.ROWNUMBER * 80 + 1 POS2
    FROM
      BASIS_INFO BI,
      SQL_TEXT STL,
      ( SELECT ROWNUM ROWNUMBER FROM V$SESSTAT WHERE ROWNUM <= 1000 ) R
    WHERE
      BI.COMPLEX_SQL_TEXT = ' ' AND
      R.ROWNUMBER * 80 <= LENGTH(STL.SQL_TEXT) + 80
  )
),
ASH_DISTRIBUTION AS
( SELECT /*+ MATERIALIZE */
    SAMPLE_TIME,
    TO_CHAR(SAMPLE_TIME, 'YYYY-MM-DD HH24') HOUR,
    PLAN_HASH_VALUE,
    NVL(PLAN_ID, 0) PLAN_ID,
    EVENT,
    WAIT_CLASS,
    OBJECT_NAME,
    SUM(BLOCKS_ACCESSED) BLOCKS_ACCESSED,
    SQL_OPNAME,
    MODULE,
    MOD_ACTION,
    USER_NAME,
    CLIENT_ID,
    ACTIVITY,
    TOP_LEVEL_SQL_ID,
    MAX(PGA_MB) MAX_PGA_MB,
    MAX(TEMP_MB) MAX_TEMP_MB,
    COUNT(*) OCCURRENCES
  FROM
  ( SELECT DISTINCT
      DECODE(ASH.SQL_OPCODE,
        3, ASH.SQL_PLAN_HASH_VALUE,
        6, ASH.SQL_PLAN_HASH_VALUE,
        7, ASH.SQL_PLAN_HASH_VALUE, 0) PLAN_HASH_VALUE,
      ASH.SQL_PLAN_LINE_ID PLAN_ID,
      ASH.SESSION_ID SID,
      ASH.SAMPLE_TIME SAMPLE_TIME,
      DECODE(SESSION_STATE,
        'WAITING', EVENT || DECODE(SUBSTR(EVENT, 1, 5),
        'enq: ', ' (' || TO_CHAR(BITAND(P1, 65535)) || ' / ' ||
        TO_CHAR(DECODE(BITAND(P1, 65535),
          1, 'Null',
          2, 'Sub-Share',
          3, 'Sub-Exclusive',
          4, 'Share',
          5, 'Share/Sub-Exclusive',
          6, 'Exclusive', 'Other')) || ')' ), 'CPU') EVENT,
      ASH.WAIT_CLASS,
      NVL(DECODE(ASH.WAIT_CLASS,
        'Application', NVL(O.OBJECT_NAME, DECODE(ASH.CURRENT_OBJ#, -1,
        'Header / Rollback / ANALYZE', 0, 'Undo Data', 'not available')),
        'Cluster', NVL(O.OBJECT_NAME, DECODE(ASH.CURRENT_OBJ#, -1,
        'Header / Rollback / ANALYZE', 0, 'Undo Data', 'not available')),
        'User I/O', DECODE(EVENT, 'direct path read temp', 'not available',
        'direct path write temp', 'not available',
        'Data file init write', 'not available',
        NVL(O.OBJECT_NAME, DECODE(ASH.CURRENT_OBJ#, -1,
        'Header / Rollback / ANALYZE', 0, 'Undo Data', NULL))),
        'not available'),
        DECODE(SSO.OBJECT_NAME, NULL, 'not available',
          SSO.OBJECT_NAME || ' (previous)')) OBJECT_NAME,
      DECODE(ASH.WAIT_CLASS, 'User I/O', P3, 0) BLOCKS_ACCESSED,
      SQL_OPNAME,
      MODULE,
      ACTION MOD_ACTION,
      NVL(DU.USERNAME, 'not available') USER_NAME,
      NVL(ASH.CLIENT_ID, 'not available') CLIENT_ID,
      DECODE(ASH.IN_CONNECTION_MGMT,     'Y', 'CONN_MGMT ') ||
        DECODE(ASH.IN_PARSE,             'Y', 'SOFT_PARSE ') ||
        DECODE(ASH.IN_HARD_PARSE,        'Y', 'HARD_PARSE ') ||
        DECODE(ASH.IN_SQL_EXECUTION,     'Y', 'SQL_EXEC ') ||
        DECODE(ASH.IN_PLSQL_EXECUTION,   'Y', 'PLSQL_EXEC ') ||
        DECODE(ASH.IN_PLSQL_RPC,         'Y', 'PLSQL_RPC ') ||
        DECODE(ASH.IN_PLSQL_COMPILATION, 'Y', 'PLSQL_COMP ') ||
        DECODE(ASH.IN_JAVA_EXECUTION,    'Y', 'JAVA_EXEC ') ||
        DECODE(ASH.IN_BIND,              'Y', 'BIND ') ||
        DECODE(ASH.IN_CURSOR_CLOSE,      'Y', 'CUR_CLOSE ') ||
        DECODE(ASH.IN_SEQUENCE_LOAD,     'Y', 'SEQ_LOAD ') ACTIVITY,
      ASH.TOP_LEVEL_SQL_ID,
      ASH.PGA_ALLOCATED / 1024 / 1024 PGA_MB,
      ASH.TEMP_SPACE_ALLOCATED / 1024 / 1024 TEMP_MB
    FROM
      DBA_HIST_ACTIVE_SESS_HISTORY ASH,
      OBJECTS O,
      DBA_HIST_SEG_STAT_OBJ SSO,
      V$INSTANCE I,
      DBA_USERS DU,
      BASIS_INFO BI,
      SNAPSHOTS SS
    WHERE
      I.INSTANCE_NUMBER = ASH.INSTANCE_NUMBER AND
      ASH.CURRENT_OBJ# = O.OBJECT_ID (+) AND
      ASH.CURRENT_OBJ# = SSO.OBJ# (+) AND
      ASH.USER_ID = DU.USER_ID (+) AND
      ASH.SQL_ID = BI.SQL_ID AND
      BI.ASH_INFO = 'X' AND
      ASH.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID
  )
  GROUP BY
    SAMPLE_TIME,
    TO_CHAR(SAMPLE_TIME, 'YYYY-MM-DD HH24'),
    PLAN_HASH_VALUE,
    PLAN_ID,
    EVENT,
    WAIT_CLASS,
    OBJECT_NAME,
    SQL_OPNAME,
    MODULE,
    MOD_ACTION,
    USER_NAME,
    CLIENT_ID,
    ACTIVITY,
    TOP_LEVEL_SQL_ID
),
TABLE_INFO AS
( SELECT /*+ MATERIALIZE */ DISTINCT
    OBJECT_OWNER TABLE_OWNER,
    OBJECT_NAME TABLE_NAME
  FROM
    BASIS_INFO BI,
    DBA_HIST_SQL_PLAN SP
  WHERE
    SP.SQL_ID = BI.SQL_ID AND
    ( OBJECT_TYPE LIKE '%TABLE%' OR
      OPERATION = 'DELETE' )
  UNION
  ( SELECT DISTINCT
      OBJECT_OWNER TABLE_OWNER,
      OBJECT_NAME TABLE_NAME
    FROM
      BASIS_INFO BI,
      V$SQL_PLAN SP
    WHERE
      SP.SQL_ID = BI.SQL_ID AND
      ( OBJECT_TYPE LIKE '%TABLE%' OR
        OPERATION = 'DELETE' )
  )
  UNION
  ( SELECT DISTINCT
      I.TABLE_OWNER TABLE_OWNER,
      I.TABLE_NAME TABLE_NAME
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQL_PLAN HSP,
      DBA_INDEXES I
    WHERE
      HSP.OBJECT_OWNER = I.OWNER AND
      HSP.OBJECT_NAME = I.INDEX_NAME AND
      HSP.SQL_ID = BI.SQL_ID AND
      HSP.OBJECT_TYPE LIKE '%INDEX%'
  )
  UNION
  ( SELECT DISTINCT
      I.TABLE_OWNER TABLE_OWNER,
      I.TABLE_NAME TABLE_NAME
    FROM
      BASIS_INFO BI,
      V$SQL_PLAN HSP,
      DBA_INDEXES I
    WHERE
      HSP.OBJECT_OWNER = I.OWNER AND
      HSP.OBJECT_NAME = I.INDEX_NAME AND
      HSP.SQL_ID = BI.SQL_ID AND
      HSP.OBJECT_TYPE LIKE '%INDEX%'
  )
  UNION
  ( SELECT DISTINCT
      OD.TO_OWNER TABLE_OWNER,
      OD.TO_NAME TABLE_NAME
    FROM
      BASIS_INFO BI,
      V$SQL S,
      V$OBJECT_DEPENDENCY OD
    WHERE
      S.ADDRESS = OD.FROM_ADDRESS AND
      S.HASH_VALUE = OD.FROM_HASH AND
      S.SQL_ID = BI.SQL_ID AND
      OD.TO_TYPE = 2
  )
  UNION
  ( SELECT
      HSS.PARSING_SCHEMA_NAME TABLE_OWNER,
      REGEXP_REPLACE(TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 200)),
        'INSERT INTO[ "]+([^ "]+)[ "]+.*', '\1', 1, 1, 'i')
        TABLE_NAME
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLTEXT HST,
      DBA_HIST_SQLSTAT HSS,
      V$INSTANCE I
    WHERE
      I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSS.SQL_ID = HST.SQL_ID AND
      HST.SQL_ID = BI.SQL_ID
  )
  UNION
  ( SELECT
      REGEXP_REPLACE(TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 200)),
        'BEGIN DBMS_STATS.*OWNNAME => [''"]+([^''"]+)[''"]+.*', '\1', 1, 1, 'i') TABLE_OWNER,
      REGEXP_REPLACE(TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 200)),
        'BEGIN DBMS_STATS.*TABNAME => [''"]+([^''"]+)[''"]+.*', '\1', 1, 1, 'i') TABLE_NAME
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLTEXT HST,
      DBA_HIST_SQLSTAT HSS,
      V$INSTANCE I
    WHERE
      I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSS.SQL_ID = HST.SQL_ID AND
      HST.SQL_ID = BI.SQL_ID
  )
  UNION
  ( SELECT
      REGEXP_REPLACE(TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 200)),
        'BEGIN DBMS_REDEFINITION.*UNAME => [''"]+([^''"]+)[''"]+.*', '\1', 1, 1, 'i') TABLE_OWNER,
      REGEXP_REPLACE(TO_CHAR(SUBSTR(HST.SQL_TEXT, 1, 200)),
        'BEGIN DBMS_REDEFINITION.*ORIG_TABLE => [''"]+([^''"]+)[''"]+.*', '\1', 1, 1, 'i') TABLE_NAME
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLTEXT HST,
      DBA_HIST_SQLSTAT HSS,
      V$INSTANCE I
    WHERE
      I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSS.SQL_ID = HST.SQL_ID AND
      HST.SQL_ID = BI.SQL_ID
  )
),
TABLE_STORAGE AS
( SELECT /*+ MATERIALIZE */
    TI.TABLE_OWNER,
    TI.TABLE_NAME,
    NULL PARTITION_NAME,
    DT.IOT_TYPE,
    NVL(DT.PCT_FREE, 10) PCT_FREE,
    NVL(DT.INI_TRANS, 1) INI_TRANS,
    DECODE(DT.CLUSTER_NAME, NULL, 'NO', 'YES') CLUSTER_TABLE,
    0 PARTITION_POSITION,
    NVL(DT.COMPRESS_FOR, 'NO') COMPRESSION,
    LTRIM(DT.DEGREE) DEGREE
  FROM
    DBA_TABLES DT,
    TABLE_INFO TI
  WHERE
    TI.TABLE_OWNER = DT.OWNER AND
   TI.TABLE_NAME = DT.TABLE_NAME
  UNION ALL
  ( SELECT
      TI.TABLE_OWNER,
      TI.TABLE_NAME,
      DTP.PARTITION_NAME,
      NULL,
      DTP.PCT_FREE,
      DTP.INI_TRANS,
      DECODE(DT.CLUSTER_NAME, NULL, 'NO', 'YES') CLUSTER_TABLE,
      DTP.PARTITION_POSITION,
      NVL(DT.COMPRESS_FOR, 'NO') COMPRESSION,
      LTRIM(DT.DEGREE) DEGREE
    FROM
      DBA_TABLES DT,
      DBA_TAB_PARTITIONS DTP,
      TABLE_INFO TI
    WHERE
      DT.OWNER = TI.TABLE_OWNER AND
      DT.TABLE_NAME = TI.TABLE_NAME AND
      TI.TABLE_OWNER = DTP.TABLE_OWNER AND
      TI.TABLE_NAME = DTP.TABLE_NAME
  )
),
TABLE_MODIFICATIONS AS
( SELECT /*+ MATERIALIZE */
    TI.TABLE_OWNER,
    TI.TABLE_NAME,
    TI.PARTITION_NAME,
    NVL(TM.INSERTS, 0) INSERTS,
    NVL(TM.UPDATES, 0) UPDATES,
    NVL(TM.DELETES, 0) DELETES
  FROM
    TABLE_STORAGE TI,
    ALL_TAB_MODIFICATIONS TM
  WHERE
    TI.TABLE_OWNER = TM.TABLE_OWNER (+) AND
    TI.TABLE_NAME = TM.TABLE_NAME (+) AND
    NVL(TI.PARTITION_NAME, ' ') = NVL(TM.PARTITION_NAME (+), ' ')
),
TABLE_COLUMNS AS
( SELECT /*+ MATERIALIZE */
    TI.TABLE_OWNER,
    TI.TABLE_NAME,
    NVL(DTC.LONG_RAW, 'NO') LONG_RAW,
    NVL(DTC.LOB, 'NO') LOB
  FROM
  ( SELECT
      OWNER,
      TABLE_NAME,
      DECODE(SUM(DECODE(DATA_TYPE, 'LONG RAW', 1, 0)), 0, 'NO', 'YES') LONG_RAW,
      DECODE(SUM(DECODE(DATA_TYPE, 'LONG RAW', 0, 1)), 0, 'NO', 'YES') LOB
    FROM
      DBA_TAB_COLS
    WHERE
      DATA_TYPE IN ( 'LONG RAW', 'CLOB', 'BLOB', 'NCLOB' )
    GROUP BY
      OWNER,
      TABLE_NAME
  ) DTC,
    TABLE_INFO TI
  WHERE
    TI.TABLE_OWNER = DTC.OWNER (+) AND
    TI.TABLE_NAME = DTC.TABLE_NAME (+)
),
INDEX_INFO AS
( SELECT /*+ MATERIALIZE */ DISTINCT
    T.TABLE_OWNER TABLE_OWNER,
    T.TABLE_NAME TABLE_NAME,
    I.OWNER INDEX_OWNER,
    I.INDEX_NAME,
    I.INDEX_TYPE,
    I.UNIQUENESS,
    DECODE(NVL(I.COMPRESSION, 'DISABLED'),
      'DISABLED', 'NO', 'ENABLED', 'PREFIX', I.COMPRESSION) COMPRESSION,
    NVL(I.PREFIX_LENGTH, 0) PREFIX_LENGTH
  FROM
    DBA_INDEXES I,
    TABLE_INFO T
  WHERE
    T.TABLE_OWNER = I.TABLE_OWNER AND
    T.TABLE_NAME = I.TABLE_NAME AND
    I.INDEX_TYPE != 'LOB'
),
INDEX_STORAGE AS
( SELECT /*+ MATERIALIZE */
    TI.INDEX_OWNER,
    TI.INDEX_NAME,
    NULL PARTITION_NAME,
    DT.INDEX_TYPE,
    NVL(DT.PCT_FREE, 10) PCT_FREE,
    NVL(DT.INI_TRANS, 2) INI_TRANS,
    0 PARTITION_POSITION,
    TI.COMPRESSION,
    TI.PREFIX_LENGTH
  FROM
    DBA_INDEXES DT,
    INDEX_INFO TI
  WHERE
    TI.INDEX_OWNER = DT.OWNER AND
    TI.INDEX_NAME = DT.INDEX_NAME
  UNION ALL
  ( SELECT
      TI.INDEX_OWNER,
      TI.INDEX_NAME,
      DTP.PARTITION_NAME,
      TI.INDEX_TYPE,
      DTP.PCT_FREE,
      DTP.INI_TRANS,
      DTP.PARTITION_POSITION,
      TI.COMPRESSION,
      TI.PREFIX_LENGTH
    FROM
      DBA_IND_PARTITIONS DTP,
      INDEX_INFO TI
    WHERE
      TI.INDEX_OWNER = DTP.INDEX_OWNER AND
      TI.INDEX_NAME = DTP.INDEX_NAME
  )
),
INDEX_ROWS_HELPER AS
( SELECT /*+ MATERIALIZE */
    IC.TABLE_NAME TABLE_NAME,
    IC.INDEX_NAME INDEX_NAME,
    IC.INDEX_OWNER INDEX_OWNER,
    IC.COLUMN_NAME COLUMN_NAME,
    II.UNIQUENESS,
    II.COMPRESSION,
    II.PREFIX_LENGTH,
    IC.COLUMN_POSITION
  FROM
    INDEX_INFO II,
    DBA_IND_COLUMNS IC,
    BASIS_INFO BI
  WHERE
    BI.SEGMENT_INFO = 'X' AND
    II.INDEX_OWNER = IC.INDEX_OWNER AND
    II.INDEX_NAME = IC.INDEX_NAME
),
INDEX_ROWS AS
( SELECT /*+ MATERIALIZE */
    IR.INDEX_NAME INDEX_NAME,
    IR.INDEX_OWNER INDEX_OWNER,
    SUM(NVL(TC.AVG_COL_LEN, 0) +               /* Length of all indexed columns */
      DECODE(TC.GLOBAL_STATS, 'YES', 0, 1)) +  /* Additional length byte in case of ANALYZE */
      6 +                                      /* ROWID bytes */
      DECODE(IR.UNIQUENESS, 'UNIQUE', 0, 1) +  /* Additional ROWID length byte for NONUNIQUE indexes */
      1 +                                      /* Lock byte */
      1 +                                      /* Flag byte */
      2                                        /* Row directory entry */
      IND_ROW_LEN,
    SUM(DECODE(SIGN(IR.COLUMN_POSITION - IR.PREFIX_LENGTH), 1, 0,
      NVL(TC.AVG_COL_LEN, 0) + DECODE(TC.GLOBAL_STATS, 'YES', 0, 1))) COMP_ROW_LEN,
    SUM(DECODE(TC.AVG_COL_LEN, NULL, 1, 0)) COL_LEN_NULL,
    SUM(DECODE(IR.COLUMN_POSITION, 1, NVL(TC.NUM_DISTINCT, 0))) FIRST_NUM_DIST
  FROM
    INDEX_ROWS_HELPER IR,
    DBA_TAB_COLS TC
  WHERE
    TC.TABLE_NAME = IR.TABLE_NAME AND
    TC.OWNER = IR.INDEX_OWNER AND
    TC.COLUMN_NAME = IR.COLUMN_NAME
  GROUP BY
    IR.INDEX_OWNER,
    IR.INDEX_NAME,
    IR.UNIQUENESS
),
INDEX_STATISTICS AS
( SELECT /*+ MATERIALIZE */
    /* Simple index statistics without partition, STATTYPE_LOCKED, STALE_STATS */
    DIS.OWNER,
    DIS.INDEX_NAME,
    NULL PARTITION_NAME,
    DIS.TABLE_OWNER,
    DIS.TABLE_NAME,
    DIS.LEAF_BLOCKS,
    DIS.NUM_ROWS,
    DIS.DISTINCT_KEYS,
    DIS.USER_STATS,
    NULL STATTYPE_LOCKED,
    NULL STALE_STATS,
    DIS.LAST_ANALYZED,
    DIS.AVG_LEAF_BLOCKS_PER_KEY
  FROM
    INDEX_INFO II,
    DBA_INDEXES DIS,
    BASIS_INFO BI
  WHERE
    BI.COMPLEX_INDEX_STATS != 'X' AND
    DIS.OWNER = II.INDEX_OWNER AND
    DIS.INDEX_NAME = II.INDEX_NAME
  UNION ALL
  ( SELECT /*+ MATERIALIZE */
      DIS.OWNER,
      DIS.INDEX_NAME,
      DIS.PARTITION_NAME,
      DIS.TABLE_OWNER,
      DIS.TABLE_NAME,
      DIS.LEAF_BLOCKS,
      DIS.NUM_ROWS,
      DIS.DISTINCT_KEYS,
      DIS.USER_STATS,
      DIS.STATTYPE_LOCKED,
      NULL STALE_STATS,
      DIS.LAST_ANALYZED,
      DIS.AVG_LEAF_BLOCKS_PER_KEY
    FROM
      INDEX_INFO II,
      DBA_IND_STATISTICS DIS,
      BASIS_INFO BI
    WHERE
      BI.COMPLEX_INDEX_STATS = 'X' AND
      DIS.OWNER = II.INDEX_OWNER AND
      DIS.INDEX_NAME = II.INDEX_NAME
  )
),
SEGMENT_INFO AS
( SELECT /*+ MATERIALIZE */
    TABLE_OWNER OWNER,
    TABLE_NAME SEGMENT_NAME,
    'TABLE' SEGMENT_TYPE,
    NULL LOB_TABLE_NAME,
    NULL LOB_COLUMN_NAME
  FROM
    TABLE_INFO
  UNION ALL
  ( SELECT
      INDEX_OWNER OWNER,
      INDEX_NAME SEGMENT_NAME,
      'INDEX' SEGMENT_TYPE,
      NULL LOB_TABLE_NAME,
      NULL LOB_COLUMN_NAME
    FROM
      INDEX_INFO
  )
  UNION ALL
  ( SELECT
      DL.OWNER OWNER,
      DL.SEGMENT_NAME SEGMENT_NAME,
      'LOBSEGMENT' SEGMENT_TYPE,
      DL.TABLE_NAME LOB_TABLE_NAME,
      DL.COLUMN_NAME LOB_COLUMN_NAME
    FROM
      TABLE_INFO TI,
      DBA_LOBS DL
    WHERE
      TI.TABLE_OWNER = DL.OWNER AND
      TI.TABLE_NAME = DL.TABLE_NAME
  )
  UNION ALL
  ( SELECT
      DL.OWNER OWNER,
      DL.INDEX_NAME SEGMENT_NAME,
      'LOBINDEX' SEGMENT_TYPE,
      DL.TABLE_NAME LOB_TABLE_NAME,
      DL.COLUMN_NAME LOB_COLUMN_NAME
    FROM
      TABLE_INFO TI,
      DBA_LOBS DL
    WHERE
      TI.TABLE_OWNER = DL.OWNER AND
      TI.TABLE_NAME = DL.TABLE_NAME
  )
),
SEGMENTS AS
( SELECT /*+ MATERIALIZE */
    S.OWNER,
    S.SEGMENT_NAME,
    S.PARTITION_NAME,
    S.SEGMENT_TYPE,
    S.TABLESPACE_NAME,
    S.BUFFER_POOL,
    S.BYTES,
    S.EXTENTS,
    S.INITIAL_EXTENT,
    S.NEXT_EXTENT,
    S.MIN_EXTENTS,
    S.MAX_EXTENTS,
    S.FREELISTS,
    S.FREELIST_GROUPS,
    TS.BLOCK_SIZE,
    DECODE(TS.EXTENT_MANAGEMENT, 'DICTIONARY', 'DMTS', 'LMTS') || '/' ||
      SUBSTR(TS.CONTENTS, 1, 1) ||
      DECODE(TS.ALLOCATION_TYPE, 'SYSTEM', ' (SYS)', 'UNIFORM',
      ' (UNI ' || ROUND(TS.MIN_EXTLEN / 1024 / 1024) || 'M)') ||
      DECODE(TS.SEGMENT_SPACE_MANAGEMENT, 'AUTO', ', ASSM', ', MSSM') TABLESPACE_TYPE,
    TS.EXTENT_MANAGEMENT,
    TS.ALLOCATION_TYPE,
    TS.SEGMENT_SPACE_MANAGEMENT,
    SI.LOB_COLUMN_NAME,
    SI.LOB_TABLE_NAME,
    O.CREATED
  FROM
    BASIS_INFO BI,
    DBA_SEGMENTS S,
    SEGMENT_INFO SI,
    DBA_TABLESPACES TS,
    OBJECTS O
  WHERE
    BI.SEGMENT_INFO = 'X' AND
    S.SEGMENT_TYPE IN
    ( 'TABLE',
      'TABLE PARTITION',
      'INDEX',
      'INDEX PARTITION',
      'LOBSEGMENT',
      'LOBINDEX'
    ) AND
    S.OWNER = SI.OWNER AND
    S.SEGMENT_NAME = SI.SEGMENT_NAME AND
    S.TABLESPACE_NAME = TS.TABLESPACE_NAME AND
    S.OWNER = O.OWNER (+) AND
    S.SEGMENT_NAME = O.OBJECT_NAME (+) AND
    NVL(S.PARTITION_NAME, ' ') = NVL(O.SUBOBJECT_NAME (+), ' ')
),
OBJECT_INFO AS
( SELECT /*+ MATERIALIZE */ DISTINCT
    OD.TO_OWNER OWNER,
    OD.TO_NAME OBJECT_NAME
  FROM
    BASIS_INFO BI,
    V$SQL S,
    V$OBJECT_DEPENDENCY OD
  WHERE
    S.SQL_ID = BI.SQL_ID AND
    S.ADDRESS = OD.FROM_ADDRESS AND
    S.HASH_VALUE = OD.FROM_HASH
),
VIEW_INFO AS
( SELECT /*+ MATERIALIZE */
    OI.OWNER,
    OI.OBJECT_NAME VIEW_NAME
  FROM
    BASIS_INFO BI,
    OBJECT_INFO OI,
    OBJECTS O
  WHERE
    BI.VIEW_INFO = 'X' AND
    OI.OWNER = O.OWNER AND
    OI.OBJECT_NAME = O.OBJECT_NAME AND
    O.OBJECT_TYPE = 'VIEW' AND
    OI.OWNER NOT LIKE 'SYS%'
),
CACHES AS
( SELECT /*+ MATERIALIZE */
    SDC.COMPONENT CACHE_NAME,
    SDC.CURRENT_SIZE / 1024 / 1024 POOL_SIZE_MB,
    DECODE(SDC.COMPONENT,
      'KEEP buffer cache', 'KEEP',
      'RECYCLE buffer cache', 'RECYCLE',
      'DEFAULT') BUFFER_POOL,
    DECODE(SDC.COMPONENT,
      'DEFAULT 2K buffer cache', 2048,
      'DEFAULT 4K buffer cache', 4096,
      'DEFAULT 8K buffer cache', 8192,
      'DEFAULT 16K buffer cache', 16384,
      'DEFAULT 32K buffer cache', 32768,
      B.VALUE) BLOCK_SIZE
  FROM
    V$SGA_DYNAMIC_COMPONENTS SDC,
    V$PARAMETER B
  WHERE
    SDC.COMPONENT IN
    ( 'DEFAULT buffer cache',
      'KEEP buffer cache',
      'RECYCLE buffer cache',
      'DEFAULT 2K buffer cache',
      'DEFAULT 4K buffer cache',
      'DEFAULT 8K buffer cache',
      'DEFAULT 16K buffer cache',
      'DEFAULT 32K buffer cache'
    ) AND
    B.NAME = 'db_block_size'
),
BIND_CONTENTS AS
( SELECT /*+ MATERIALIZE */
    CAPTURE_TIME,
    POSITION,
    NAME,
    VALUE_STRING
  FROM
  ( SELECT
      MIN(SNAP_ID) OVER (PARTITION BY LAST_CAPTURED) MIN_SNAP_ID,
      SNAP_ID,
      LAST_CAPTURED CAPTURE_TIME,
      POSITION,
      NAME,
      VALUE_STRING
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLBIND HSB,
      SNAPSHOTS SS
    WHERE
      HSB.SQL_ID = BI.SQL_ID AND
      HSB.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
      LAST_CAPTURED IS NOT NULL
  )
  WHERE
    SNAP_ID = MIN_SNAP_ID
),
DISTINCT_LITERALS AS
( SELECT /*+ MATERIALIZE */
    POSITION,
    NAME,
    MIN(VALUE_STRING) EXAMPLE_VALUE,
    COUNT(DISTINCT(VALUE_STRING)) NUM_DISTINCT
  FROM
    BIND_CONTENTS
  GROUP BY POSITION, NAME
),
SQL_PLANS AS
( SELECT /*+ MATERIALIZE */
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    SQL_ID,
    DEPTH,
    OPTIMIZER,
    OPERATION || DECODE(OPTIONS, NULL, NULL, ' ' || OPTIONS ||
      DECODE(OBJECT_NAME, NULL, NULL, ' (' || OBJECT_NAME || ')')) ACTION_INFO,
    DECODE(INCLUDE_PREDICATES, 'X',
      DECODE(SOURCE, 'HISTORY',
        DECODE(SEARCH_COLUMNS, NULL, NULL, 0, NULL, 'Search columns: ' || SEARCH_COLUMNS),
        NULL),
      DECODE(SEARCH_COLUMNS, NULL, NULL, 0, NULL, 'Search columns: ' || SEARCH_COLUMNS)) SEARCH_COLUMNS_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', DECODE(ACCESS_PREDICATES, NULL, NULL,
      SUBSTR(ACCESS_PREDICATES, 1, 3000)), NULL) ACCESS_PREDICATE_INFO,
    DECODE(INCLUDE_PREDICATES, 'X', DECODE(FILTER_PREDICATES, NULL, NULL,
      SUBSTR(FILTER_PREDICATES, 1, 3000)), NULL) FILTER_PREDICATE_INFO,
    DECODE(MEMORY_USED, NULL, NULL, 'PGA space: ' || ROUND(MEMORY_USED / 1024) || ' KB' ||
      DECODE(TEMP_SPACE, NULL, NULL, ', Temp space: ' || ROUND(TEMP_SPACE / 1024) || ' KB')) SPACE_INFO,
    DECODE(PARTITION_START, NULL, NULL, 'Partitions: ' || PARTITION_START || ' - ' || PARTITION_STOP ||
      ', Partition ID: ' || PARTITION_ID) PARTITION_INFO,
    DECODE(PX_DEGREE, NULL, NULL, 1, NULL, 'PX degree: ' || PX_DEGREE) PX_INFO,
    DECODE(COST, NULL, NULL, 'Total costs: ' || TO_CHAR(COST) ) ||
      DECODE(IO_COST, NULL, NULL, ', I/O costs: ' || TO_CHAR(IO_COST) ) ||
      DECODE(COST, NULL, NULL, DECODE(IO_COST, NULL, NULL, ', CPU costs: ' || TO_CHAR(COST - IO_COST) )) ||
      DECODE(CARDINALITY, NULL, NULL, DECODE(IO_COST || COST, NULL, NULL, ', ') ||
      'E-Rows: ' || TO_CHAR(CARDINALITY) ) COST_INFO,
    DECODE(LAST_STARTS, NULL , NULL, 'Starts: ' || LAST_STARTS || ', A-Rows: ' || LAST_OUTPUT_ROWS || ', Gets: ' || LAST_BUFFER_GETS ||
      ', Reads: ' || LAST_DISK_READS || ', Time: ' || LAST_ELAPSED_TIME || ' us') PLAN_STATISTICS_INFO
  FROM
  ( ( SELECT
        SP.PLAN_HASH_VALUE,
        TO_CHAR(SP.CHILD_NUMBER) CHILD_NUMBER,
        SP.ID,
        SP.SEARCH_COLUMNS,
        SP."DEPTH",
        SP.OPERATION,
        SP.OPTIONS,
        SP.OBJECT_NAME,
        SP.ACCESS_PREDICATES,
        SP.FILTER_PREDICATES,
        SP.TEMP_SPACE,
        SPA.LAST_MEMORY_USED MEMORY_USED,
        SPA.LAST_DEGREE PX_DEGREE,
        SP.PARTITION_START,
        SP.PARTITION_STOP,
        SP.PARTITION_ID,
        SP.COST,
        SP.IO_COST,
        SP.CARDINALITY,
        SPA.LAST_STARTS,
        SPA.LAST_OUTPUT_ROWS,
        SPA.LAST_CR_BUFFER_GETS + SPA.LAST_CU_BUFFER_GETS LAST_BUFFER_GETS,
        SPA.LAST_DISK_READS,
        SPA.LAST_ELAPSED_TIME,
        SP.OPTIMIZER,
        SP.SQL_ID,
        BI.INCLUDE_PREDICATES,
        'CURRENT' SOURCE
      FROM
        V$SQL_PLAN SP,
        V$SQL_PLAN_STATISTICS_ALL SPA,
        BASIS_INFO BI
      WHERE
        SP.SQL_ID = SPA.SQL_ID (+) AND
        SP.CHILD_NUMBER = SPA.CHILD_NUMBER (+) AND
        SP.ID = SPA.ID (+) AND
        SP.SQL_ID = BI.SQL_ID
    )
    UNION
    ( SELECT
        PLAN_HASH_VALUE,
        'n/a' CHILD_NUMBER,
        ID,
        SEARCH_COLUMNS,
        DEPTH,
        OPERATION,
        OPTIONS,
        OBJECT_NAME,
        ACCESS_PREDICATES,
        FILTER_PREDICATES,
        TEMP_SPACE,
        NULL MEMORY_USED,
        NULL PX_DEGREE,
        PARTITION_START,
        PARTITION_STOP,
        PARTITION_ID,
        COST,
        IO_COST,
        CARDINALITY,
        NULL LAST_STARTS,
        NULL LAST_OUTPUT_ROWS,
        NULL LAST_BUFFER_GETS,
        NULL LAST_DISK_READS,
        NULL LAST_ELAPSED_TIME,
        OPTIMIZER,
        HSP.SQL_ID,
        BI.INCLUDE_PREDICATES,
        'HISTORY' SOURCE
      FROM
        DBA_HIST_SQL_PLAN HSP,
        BASIS_INFO BI
      WHERE
        HSP.DBID = BI.DBID AND
        HSP.SQL_ID = BI.SQL_ID AND
        NOT EXISTS
        ( SELECT
            1
          FROM
            V$SQL_PLAN SP
          WHERE
            SP.SQL_ID = HSP.SQL_ID AND
            SP.PLAN_HASH_VALUE = HSP.PLAN_HASH_VALUE
        )
    )
  )
),
PREDICATE_INFOS AS
( SELECT /*+ MATERIALIZE */
    'ACCESS' PREDICATE_TYPE,
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    DEPTH,
    ' Access predicates: ' || ACCESS_PREDICATE_INFO || ' ' PREDICATE_INFO
  FROM
    SQL_PLANS
  WHERE
    ACCESS_PREDICATE_INFO IS NOT NULL
  UNION ALL
  ( SELECT
      'FILTER' PREDICATE_TYPE,
      PLAN_HASH_VALUE,
      CHILD_NUMBER,
      ID,
      DEPTH,
      ' Filter predicates: ' || FILTER_PREDICATE_INFO || ' ' PREDICATE_INFO
    FROM
      SQL_PLANS
    WHERE
      FILTER_PREDICATE_INFO IS NOT NULL
  )
  UNION ALL
  ( SELECT
      'DUMMY' PREDICATE_TYPE,
      123 PLAN_HASH_VALUE,
      '345' CHILD_NUMBER,
      567 ID,
      789 DEPTH,
      ' XXX ' PREDICATE_INFO
    FROM
      DUAL
  )
),
PRED_START_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    *
  FROM
  ( SELECT
      PREDICATE_TYPE,
      PREDICATE_INFO,
      PLAN_HASH_VALUE,
      CHILD_NUMBER,
      ID,
      INSTR(PREDICATE_INFO, ' ', 1, ROWN) POS
    FROM
      PREDICATE_INFOS PI,
      ( SELECT ROWNUM ROWN FROM V$SESSTAT, V$SESSTAT WHERE ROWNUM <= 1000 ) RN
  )
  WHERE
    POS != 0
),
PRED_START_END_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    PREDICATE_TYPE,
    PREDICATE_INFO,
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    POS1,
    PREDICATE_TYPE || PLAN_HASH_VALUE || CHILD_NUMBER || ID || POS1 CONN_ID1,
    POS2,
    PREDICATE_TYPE || PLAN_HASH_VALUE || CHILD_NUMBER || ID || POS2 CONN_ID2
  FROM
  ( SELECT
      PREDICATE_TYPE,
      PREDICATE_INFO,
      PLAN_HASH_VALUE,
      CHILD_NUMBER,
      ID,
      POS1,
      NVL(POS2, POS_OVERFLOW) POS2
    FROM
    ( SELECT
        SP1.PREDICATE_TYPE,
        SP1.PREDICATE_INFO,
        SP1.PLAN_HASH_VALUE,
        SP1.CHILD_NUMBER,
        SP1.ID,
        SP1.POS POS1,
        MAX(SP2.POS) POS2,
        MIN(SP3.POS) POS_OVERFLOW
      FROM
        BASIS_INFO BI,
        PRED_START_POSITIONS SP1,
        PRED_START_POSITIONS SP2,
        PRED_START_POSITIONS SP3
      WHERE
        SP2.PREDICATE_TYPE (+) = SP1.PREDICATE_TYPE AND
        SP2.PLAN_HASH_VALUE (+) = SP1.PLAN_HASH_VALUE AND
        SP2.CHILD_NUMBER (+) = SP1.CHILD_NUMBER AND
        SP2.ID (+) = SP1.ID AND
        SP2.POS (+) BETWEEN SP1.POS + 1 AND SP1.POS + 80 AND
        SP3.PREDICATE_TYPE = SP1.PREDICATE_TYPE AND
        SP3.PLAN_HASH_VALUE = SP1.PLAN_HASH_VALUE AND
        SP3.CHILD_NUMBER = SP1.CHILD_NUMBER AND
        SP3.ID = SP1.ID AND
        SP3.POS > SP1.POS
      GROUP BY
        SP1.PREDICATE_TYPE,
        SP1.PREDICATE_INFO,
        SP1.PLAN_HASH_VALUE,
        SP1.CHILD_NUMBER,
        SP1.ID,
        SP1.POS
    )
  )
),
PRED_START_END_LINE_POSITIONS AS
( SELECT /*+ MATERIALIZE */
    PREDICATE_TYPE,
    PREDICATE_INFO,
    PLAN_HASH_VALUE,
    CHILD_NUMBER,
    ID,
    POS1,
    POS2,
    ROW_NUMBER () OVER (ORDER BY POS1) LINE
  FROM
    PRED_START_END_POSITIONS
  START WITH
    POS1 = 1
  CONNECT BY PRIOR
    CONN_ID2 = CONN_ID1
),
LINES AS
( SELECT 1 NUM, 'ACTION' CONTENT FROM DUAL
  UNION ALL
  SELECT 2 NUM, 'COST' CONTENT FROM DUAL
  UNION ALL
  SELECT 3 NUM, 'SEARCH COLUMNS' CONTENT FROM DUAL
  UNION ALL
  SELECT 4 NUM, 'ACCESS PREDICATE' CONTENT FROM DUAL
  UNION ALL
  SELECT 5 NUM, 'FILTER PREDICATE' CONTENT FROM DUAL
  UNION ALL
  SELECT 6 NUM, 'SPACE' CONTENT FROM DUAL
  UNION ALL
  SELECT 7 NUM, 'PARTITION' CONTENT FROM DUAL
  UNION ALL
  SELECT 8 NUM, 'PX' CONTENT FROM DUAL
  UNION ALL
  SELECT 9 NUM, 'PLAN STATISTICS' CONTENT FROM DUAL
  UNION ALL
  SELECT 10 NUM, 'EMPTY' CONTENT FROM DUAL
),
SEGMENT_STATISTICS AS
( SELECT /*+ MATERIALIZE */
    S.INSTANCE_NUMBER,
    DECODE(NVL(O.OWNER, SSO.OWNER),
      '** UNAVAILABLE **', NVL(O2.OWNER, S.OBJ# || '/' || S.DATAOBJ#),
      NVL(O.OWNER, NVL(SSO.OWNER, S.OBJ# || '/' || S.DATAOBJ#))) OWNER,
    DECODE(NVL(O.OBJECT_NAME, SSO.OBJECT_NAME),
      '** UNAVAILABLE **', NVL(O2.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#),
      NVL(O.OBJECT_NAME, NVL(SSO.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#))) SEGMENT_NAME,
    MIN(NVL(O.OBJECT_TYPE, SSO.OBJECT_TYPE)) SEG_TYPE,
    SUM(S.LOGICAL_READS_DELTA) LOGICAL_READS,
    SUM(S.PHYSICAL_READS_DELTA) PHYSICAL_READS,
    SUM(S.DB_BLOCK_CHANGES_DELTA) DB_BLOCK_CHANGES,
    SUM(S.PHYSICAL_WRITES_DELTA) PHYSICAL_WRITES,
    SUM(S.PHYSICAL_READS_DIRECT_DELTA) PHYSICAL_READS_DIRECT,
    SUM(S.PHYSICAL_WRITES_DIRECT_DELTA) PHYSICAL_WRITES_DIRECT,
    SUM(S.BUFFER_BUSY_WAITS_DELTA) BUFFER_BUSY_WAITS,
    SUM(S.ITL_WAITS_DELTA) ITL_WAITS,
    SUM(S.ROW_LOCK_WAITS_DELTA) ROW_LOCK_WAITS,
    SUM(S.TABLE_SCANS_DELTA) SEGMENT_SCANS,
    SUM(S.SPACE_USED_DELTA) / 1024 / 1024 SPACE_USED_DELTA_MB,
    SUM(S.SPACE_ALLOCATED_DELTA) / 1024 / 1024 SPACE_ALLOC_DELTA_MB,
    SUM(S.GC_CR_BLOCKS_SERVED_DELTA) GC_CR_BLOCKS_SERVED_DELTA,
    SUM(S.GC_CU_BLOCKS_SERVED_DELTA) GC_CU_BLOCKS_SERVED_DELTA,
    SUM(S.GC_CR_BLOCKS_RECEIVED_DELTA) GC_CR_BLOCKS_RECEIVED_DELTA,
    SUM(S.GC_CU_BLOCKS_RECEIVED_DELTA) GC_CU_BLOCKS_RECEIVED_DELTA,
    SUM(S.GC_BUFFER_BUSY_DELTA) GC_BUFFER_BUSY_DELTA
  FROM
    V$INSTANCE I,
    SNAPSHOTS SS,
    DBA_HIST_SEG_STAT S,
    OBJECTS O,
    DBA_HIST_SEG_STAT_OBJ SSO,
    OBJECTS O2
  WHERE
    S.INSTANCE_NUMBER = I.INSTANCE_NUMBER AND
    S.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
    S.OBJ# = O.OBJECT_ID (+) AND
    S.DATAOBJ# = O.DATA_OBJECT_ID (+) AND
    S.OBJ# = SSO.OBJ# (+) AND
    S.DATAOBJ# = SSO.DATAOBJ# (+) AND
    S.OBJ# = O2.OBJECT_ID (+)
  GROUP BY
    DECODE(NVL(O.OWNER, SSO.OWNER),
      '** UNAVAILABLE **', NVL(O2.OWNER, S.OBJ# || '/' || S.DATAOBJ#),
      NVL(O.OWNER, NVL(SSO.OWNER, S.OBJ# || '/' || S.DATAOBJ#))),
    DECODE(NVL(O.OBJECT_NAME, SSO.OBJECT_NAME),
      '** UNAVAILABLE **', NVL(O2.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#),
      NVL(O.OBJECT_NAME, NVL(SSO.OBJECT_NAME, S.OBJ# || '/' || S.DATAOBJ#))),
    S.INSTANCE_NUMBER
)
SELECT
  'DETAIL INFORMATION FOR SQL_ID: ' || SQL_ID LINE
FROM
  BASIS_INFO
UNION ALL
( SELECT
    RPAD('EVALUATION TIME:', 31) || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') LINE
  FROM DUAL
)
UNION ALL
( SELECT
    RPAD('ANALYSIS INTERVAL:', 31) ||
      TO_CHAR(BEGIN_TIME, 'YYYY-MM-DD HH24:MI:SS') || ' - ' ||
      TO_CHAR(END_TIME, 'YYYY-MM-DD HH24:MI:SS') LINE
  FROM
    SNAPSHOTS
)
UNION ALL
( SELECT
    RPAD(DECODE(LINE, 1, 'LAST STARTUP TIMES:', ' '), 31) ||
    TO_CHAR(STARTUP_TIME, 'YYYY-MM-DD HH24:MI:SS') LINE
  FROM
  ( SELECT
      ROW_NUMBER () OVER (ORDER BY STARTUP_TIME DESC) LINE,
      STARTUP_TIME
    FROM
     DBA_HIST_DATABASE_INSTANCE
    ORDER BY
      STARTUP_TIME DESC
  )
  WHERE
    ROWNUM <= 5
)
UNION ALL
( SELECT
    RPAD('DATABASE NAME:', 31) || NAME
  FROM
    V$DATABASE
)
UNION ALL
( SELECT
    RPAD('INSTANCE NAME:', 31) || INSTANCE_NAME
  FROM
    V$INSTANCE
)
UNION ALL
( SELECT
    RPAD('VERSION:', 31) || VERSION
  FROM
    V$INSTANCE
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL STATEMENT (V$SQLSTATS, DBA_HIST_SQLTEXT, V$SQL):'
  FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LINE FROM
  ( SELECT
      SUBSTR(STL.SQL_TEXT, SEP.POS1, SEP.POS2 - SEP.POS1) LINE
    FROM
      START_END_LINE_POSITIONS SEP,
      SQL_TEXT STL
    ORDER BY
      SEP.POS1
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL CACHE (V$SQL, V$SQLSTATS_PLAN_HASH, DBA_HIST_SQLSTAT, V$SQL_MONITOR):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('BEGIN_TIME', 19) ||
    LPAD('PLAN_HASH', 11) ||
    LPAD('EXECUTIONS', 11) ||
    LPAD('ELA_TIME_MS', 12) ||
    LPAD('ELA_TIME_MS/EXE', 16) ||
    LPAD('CPU_TIME_MS', 12) ||
    LPAD('RECORDS', 12) ||
    LPAD('REC/EXEC', 12) ||
    LPAD('DISK_READS', 11) ||
    LPAD('DISK_READS/EXE', 15) ||
    LPAD('BUFFER_GETS', 12) ||
    LPAD('BUFFER_GETS/EXE', 16) ||
    LPAD('BUFFER_GETS/REC', 16) ||
    LPAD('PARSE_MS', 12) ||
    LPAD('PARSES', 7) ||
    RPAD(' MODULE', 41) LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('V$SQL (Child:' || TO_CHAR(S.CHILD_NUMBER, 90) || ')', 19) ||
    LPAD(PLAN_HASH_VALUE, 11) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(ROUND(ELAPSED_TIME / 1000), 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ELAPSED_TIME / 1000 / EXECUTIONS,
      2)), 999999999990.99) ||
    LPAD(ROUND(CPU_TIME / 1000), 12) ||
    LPAD(ROWS_PROCESSED, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ROWS_PROCESSED / EXECUTIONS, 2)),
      99999990.99) ||
    LPAD(DISK_READS, 11) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(DISK_READS / EXECUTIONS, 2)),
      99999999990.99) ||
    LPAD(BUFFER_GETS, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(BUFFER_GETS / EXECUTIONS, 2)),
      999999999990.99) ||
    TO_CHAR(DECODE(ROWS_PROCESSED, 0, 0, ROUND(BUFFER_GETS / ROWS_PROCESSED,
      2)), 999999999990.99) ||
    LPAD('not avail.', 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' ' || MODULE, 41) LINE
  FROM
    BASIS_INFO BI,
    V$SQL S
  WHERE
    S.SQL_ID = BI.SQL_ID
)
UNION ALL
( SELECT
    RPAD('V$SQLSTATS', 19) ||
    LPAD(PLAN_HASH_VALUE, 11) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(ROUND(ELAPSED_TIME / 1000), 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ELAPSED_TIME / 1000 / EXECUTIONS,
      2)), 999999999990.99) ||
    LPAD(ROUND(CPU_TIME / 1000), 12) ||
    LPAD(ROWS_PROCESSED, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(ROWS_PROCESSED / EXECUTIONS, 2)),
      99999990.99) ||
    LPAD(DISK_READS, 11) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(DISK_READS / EXECUTIONS, 2)),
      99999999990.99) ||
    LPAD(BUFFER_GETS, 12) ||
    TO_CHAR(DECODE(EXECUTIONS, 0, 0, ROUND(BUFFER_GETS / EXECUTIONS, 2)),
      999999999990.99) ||
    TO_CHAR(DECODE(ROWS_PROCESSED, 0, 0, ROUND(BUFFER_GETS / ROWS_PROCESSED,
      2)), 999999999990.99) ||
    LPAD(ROUND(AVG_HARD_PARSE_TIME / 1000, 2), 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' not available in V$SQLSTATS', 41) LINE
  FROM
    BASIS_INFO BI,
    V$SQLSTATS_PLAN_HASH SS
  WHERE
    SS.SQL_ID = BI.SQL_ID
)
UNION ALL
( SELECT
    RPAD(BEGIN_TIME, 19) ||
    LPAD(PLAN_HASH_VALUE, 11) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(ELAPSED_TIME_MS, 12) ||
    LPAD(ELAPSED_TIME_MS_PER_EXEC, 16) ||
    LPAD(CPU_TIME_MS, 12) ||
    LPAD(RECORDS, 12) ||
    LPAD(RECORDS_PER_EXEC, 12) ||
    LPAD(DISK_READS, 11) ||
    LPAD(DISK_READS_PER_EXEC, 15) ||
    LPAD(BUFFER_GETS, 12) ||
    LPAD(BUFFER_GETS_PER_EXEC, 16) ||
    LPAD(BUFFER_GETS_PER_RECORD, 16) ||
    LPAD(AVG_PARSE, 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' ' || MODULE, 41) LINE
  FROM
  ( SELECT
      'TOTAL (HISTORY)' BEGIN_TIME,
      SUM(HSQ.EXECUTIONS_DELTA) EXECUTIONS,
      SUM(HSQ.ROWS_PROCESSED_DELTA) RECORDS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.ROWS_PROCESSED_DELTA) /
        SUM(HSQ.EXECUTIONS_DELTA)), 99999990.99) RECORDS_PER_EXEC,
      SUM(HSQ.DISK_READS_DELTA) DISK_READS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.DISK_READS_DELTA) /
        SUM(HSQ.EXECUTIONS_DELTA)), 99999999990.99) DISK_READS_PER_EXEC,
      SUM(HSQ.BUFFER_GETS_DELTA) BUFFER_GETS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.BUFFER_GETS_DELTA) /
        SUM(HSQ.EXECUTIONS_DELTA)), 999999999990.99) BUFFER_GETS_PER_EXEC,
      TO_CHAR(DECODE(SUM(HSQ.ROWS_PROCESSED_DELTA), 0, 0, SUM(HSQ.BUFFER_GETS_DELTA) /
        SUM(HSQ.ROWS_PROCESSED_DELTA)), 999999999990.99) BUFFER_GETS_PER_RECORD,
      ROUND(SUM(HSQ.ELAPSED_TIME_DELTA) / 1000) ELAPSED_TIME_MS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.ELAPSED_TIME_DELTA) /
        SUM(HSQ.EXECUTIONS_DELTA) / 1000), 999999999990.99) ELAPSED_TIME_MS_PER_EXEC,
      ROUND(SUM(HSQ.CPU_TIME_DELTA) / 1000) CPU_TIME_MS,
      TO_CHAR(DECODE(SUM(HSQ.EXECUTIONS_DELTA), 0, 0, SUM(HSQ.CPU_TIME_DELTA) /
        SUM(HSQ.EXECUTIONS_DELTA) / 1000), 999999999990.99) CPU_TIME_MS_PER_EXEC,
      'not avail.' AVG_PARSE,
      HSQ.PLAN_HASH_VALUE,
      SUM(HSQ.PARSE_CALLS_DELTA) PARSE_CALLS,
      ' ' MODULE
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLSTAT HSQ,
      V$INSTANCE I,
      SNAPSHOTS SS
    WHERE
      HSQ.DBID = BI.DBID AND
      HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
      I.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
      HSQ.SQL_ID = BI.SQL_ID
    GROUP BY
      HSQ.PLAN_HASH_VALUE
    ORDER BY
      HSQ.PLAN_HASH_VALUE
  )
)
UNION ALL
( SELECT
    LPAD(BEGIN_TIME, 19) ||
    LPAD(PLAN_HASH_VALUE, 11) ||
    LPAD(EXECUTIONS, 11) ||
    LPAD(ELAPSED_TIME_MS, 12) ||
    LPAD(ELAPSED_TIME_MS_PER_EXEC, 16) ||
    LPAD(CPU_TIME_MS, 12) ||
    LPAD(RECORDS, 12) ||
    LPAD(RECORDS_PER_EXEC, 12) ||
    LPAD(DISK_READS, 11) ||
    LPAD(DISK_READS_PER_EXEC, 15) ||
    LPAD(BUFFER_GETS, 12) ||
    LPAD(BUFFER_GETS_PER_EXEC, 16) ||
    LPAD(BUFFER_GETS_PER_RECORD, 16) ||
    LPAD(AVG_PARSE, 12) ||
    LPAD(PARSE_CALLS, 7) ||
    RPAD(' ' || MODULE, 41) LINE
  FROM
  ( SELECT
      TO_CHAR(HSS.BEGIN_INTERVAL_TIME, 'YYYY-MM-DD HH24:MI:SS') BEGIN_TIME,
      NVL(HSQ.EXECUTIONS_DELTA, 0) EXECUTIONS,
      NVL(HSQ.ROWS_PROCESSED_DELTA, 0) RECORDS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.ROWS_PROCESSED_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA), 99999990.99) RECORDS_PER_EXEC,
      NVL(HSQ.DISK_READS_DELTA, 0) DISK_READS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.DISK_READS_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA), 99999999990.99) DISK_READS_PER_EXEC,
      NVL(HSQ.BUFFER_GETS_DELTA, 0) BUFFER_GETS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.BUFFER_GETS_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA), 999999999990.99) BUFFER_GETS_PER_EXEC,
      TO_CHAR(DECODE(NVL(HSQ.ROWS_PROCESSED_DELTA, 0), 0, 0, NVL(HSQ.BUFFER_GETS_DELTA, 0) /
        HSQ.ROWS_PROCESSED_DELTA), 999999999990.99) BUFFER_GETS_PER_RECORD,
      ROUND(NVL(HSQ.ELAPSED_TIME_DELTA, 0) / 1000) ELAPSED_TIME_MS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.ELAPSED_TIME_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA / 1000), 999999999990.99) ELAPSED_TIME_MS_PER_EXEC,
      ROUND(NVL(HSQ.CPU_TIME_DELTA, 0) / 1000) CPU_TIME_MS,
      TO_CHAR(DECODE(NVL(HSQ.EXECUTIONS_DELTA, 0), 0, 0, NVL(HSQ.CPU_TIME_DELTA, 0) /
        HSQ.EXECUTIONS_DELTA / 1000), 999999999990.99) CPU_TIME_MS_PER_EXEC,
      'not avail.' AVG_PARSE,
      NVL(HSQ.PARSE_CALLS_DELTA, 0) PARSE_CALLS,
      NVL(HSQ.PLAN_HASH_VALUE, 0) PLAN_HASH_VALUE,
      HSQ.MODULE MODULE
    FROM
      BASIS_INFO BI,
      DBA_HIST_SQLSTAT HSQ,
      DBA_HIST_SNAPSHOT HSS,
      SNAPSHOTS SS,
      V$INSTANCE I
    WHERE
      HSQ.DBID = BI.DBID AND
      HSS.DBID = HSQ.DBID AND
      I.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
      I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
      HSQ.SNAP_ID = HSS.SNAP_ID AND
      HSQ.SQL_ID = BI.SQL_ID
    ORDER BY
      HSQ.SNAP_ID DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('SOURCE', 18) ||
    LPAD('PLAN_HASH', 11) ||
    LPAD('CPU_%', 6) ||
    LPAD('USER_IO_%', 10) ||
    LPAD('APPLICATION_%', 14) ||
    LPAD('CONCURRENCY_%', 14) ||
    LPAD('OTHER_%', 8) ||
    LPAD('CLUSTER_%', 10) ||
    LPAD('PLSQL_%', 8) ||
    LPAD('JAVA_%', 7) ||
    LPAD('FETCHES_PER_EXEC', 17) ||
    LPAD('END_OF_FETCH_%', 15) ||
    LPAD('BUFFER_QUALITY_%', 17) ||
    LPAD('DISK_READ_TIME_MS', 18) ||
    LPAD('SHARABLE_MEM_KB', 16) LINE
  FROM DUAL
)
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('V$SQLSTATS', 18) ||
    LPAD(PLAN_HASH_VALUE, 11) ||
    LPAD("CPU_%", 6) ||
    LPAD("USER_IO_%", 10) ||
    LPAD("APPLICATION_%", 14) ||
    LPAD("CONCURRENCY_%", 14) ||
    LPAD("OTHER_%", 8) ||
    LPAD("CLUSTER_%", 10) ||
    LPAD("PLSQL_%", 8) ||
    LPAD("JAVA_%", 7) ||
    LPAD("FETCHES_PER_EXEC", 17) ||
    LPAD("END_OF_FETCH_%", 15) ||
    LPAD("BUFFER_QUALITY_%", 17) ||
    LPAD("DISK_READ_TIME_MS", 18) ||
    LPAD(TO_CHAR(SHARABLE_MEM / 1024, 999999990.99), 16) LINE
  FROM
  ( SELECT
      ROUND(CPU_TIME / ELAPSED_TIME * 100) "CPU_%",
      ROUND(USER_IO_WAIT_TIME / ELAPSED_TIME * 100) "USER_IO_%",
      ROUND(APPLICATION_WAIT_TIME / ELAPSED_TIME * 100) "APPLICATION_%",
      ROUND(CONCURRENCY_WAIT_TIME / ELAPSED_TIME * 100) "CONCURRENCY_%",
      ROUND((ELAPSED_TIME - CPU_TIME - USER_IO_WAIT_TIME -
        APPLICATION_WAIT_TIME - CONCURRENCY_WAIT_TIME -
        CLUSTER_WAIT_TIME - PLSQL_EXEC_TIME -
        JAVA_EXEC_TIME) / ELAPSED_TIME * 100) "OTHER_%",
      ROUND(CLUSTER_WAIT_TIME / ELAPSED_TIME * 100) "CLUSTER_%",
      ROUND(PLSQL_EXEC_TIME / ELAPSED_TIME * 100) "PLSQL_%",
      ROUND(JAVA_EXEC_TIME / ELAPSED_TIME * 100) "JAVA_%",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, FETCHES / EXECUTIONS), 9999999999990.99) "FETCHES_PER_EXEC",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, END_OF_FETCH_COUNT / EXECUTIONS * 100), 9999999990.99) "END_OF_FETCH_%",
      TO_CHAR(DECODE(BUFFER_GETS, 0, 0, (BUFFER_GETS - DISK_READS) / BUFFER_GETS * 100),
        999999999990.99) "BUFFER_QUALITY_%",
      TO_CHAR(DECODE(DISK_READS, 0, 0, USER_IO_WAIT_TIME / DISK_READS / 1000),
        9999999999990.99) "DISK_READ_TIME_MS",
      SHARABLE_MEM,
      PLAN_HASH_VALUE
    FROM
      BASIS_INFO BI,
      V$SQLSTATS_PLAN_HASH SS
    WHERE
      SS.SQL_ID = BI.SQL_ID AND
      ELAPSED_TIME > 0
  )
)
UNION ALL
( SELECT
    RPAD('DBA_HIST_SQLSTAT', 18) ||
    LPAD(PLAN_HASH_VALUE, 11) ||
    LPAD("CPU_%", 6) ||
    LPAD("USER_IO_%", 10) ||
    LPAD("APPLICATION_%", 14) ||
    LPAD("CONCURRENCY_%", 14) ||
    LPAD("OTHER_%", 8) ||
    LPAD("CLUSTER_%", 10) ||
    LPAD("PLSQL_%", 8) ||
    LPAD("JAVA_%", 7) ||
    LPAD("FETCHES_PER_EXEC", 17) ||
    LPAD("END_OF_FETCH_%", 15) ||
    LPAD("BUFFER_QUALITY_%", 17) ||
    LPAD("DISK_READ_TIME_MS", 18) ||
    LPAD(TO_CHAR(SHARABLE_MEM / 1024, 999999990.99), 16) LINE
  FROM
  ( SELECT
      ROUND(CPU_TIME_MS / ELAPSED_TIME_MS * 100) "CPU_%",
      ROUND(USER_IO_TIME_MS / ELAPSED_TIME_MS * 100) "USER_IO_%",
      ROUND(APPLICATION_TIME_MS / ELAPSED_TIME_MS * 100) "APPLICATION_%",
      ROUND(CONCURRENCY_TIME_MS / ELAPSED_TIME_MS * 100) "CONCURRENCY_%",
      ROUND((ELAPSED_TIME_MS - CPU_TIME_MS - USER_IO_TIME_MS -
        APPLICATION_TIME_MS - CONCURRENCY_TIME_MS -
        CLUSTER_TIME_MS - PLSQL_TIME_MS -
        JAVA_TIME_MS) / ELAPSED_TIME_MS * 100) "OTHER_%",
      ROUND(CLUSTER_TIME_MS / ELAPSED_TIME_MS * 100) "CLUSTER_%",
      ROUND(PLSQL_TIME_MS / ELAPSED_TIME_MS * 100) "PLSQL_%",
      ROUND(JAVA_TIME_MS / ELAPSED_TIME_MS * 100) "JAVA_%",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, FETCHES / EXECUTIONS), 9999999999990.99) "FETCHES_PER_EXEC",
      TO_CHAR(DECODE(EXECUTIONS, 0, 0, END_OF_FETCH_COUNT / EXECUTIONS * 100), 9999999990.99) "END_OF_FETCH_%",
      TO_CHAR(DECODE(BUFFER_GETS, 0, 0, (BUFFER_GETS - DISK_READS) / BUFFER_GETS * 100),
        999999999990.99) "BUFFER_QUALITY_%",
      TO_CHAR(DECODE(DISK_READS, 0, 0, USER_IO_TIME_MS / DISK_READS),
        9999999999990.99) "DISK_READ_TIME_MS",
      SHARABLE_MEM,
      PLAN_HASH_VALUE
    FROM
    ( SELECT
        ROUND(SUM(HSQ.ELAPSED_TIME_DELTA) / 1000) ELAPSED_TIME_MS,
        ROUND(SUM(HSQ.CPU_TIME_DELTA) / 1000) CPU_TIME_MS,
        ROUND(SUM(HSQ.IOWAIT_DELTA) / 1000) USER_IO_TIME_MS,
        ROUND(SUM(HSQ.APWAIT_DELTA) / 1000) APPLICATION_TIME_MS,
        ROUND(SUM(HSQ.CCWAIT_DELTA) / 1000) CONCURRENCY_TIME_MS,
        ROUND(SUM(HSQ.CLWAIT_DELTA) / 1000) CLUSTER_TIME_MS,
        ROUND(SUM(HSQ.PLSEXEC_TIME_DELTA) / 1000) PLSQL_TIME_MS,
        ROUND(SUM(JAVEXEC_TIME_DELTA) / 1000) JAVA_TIME_MS,
        SUM(BUFFER_GETS_DELTA) BUFFER_GETS,
        SUM(DISK_READS_DELTA) DISK_READS,
        SUM(FETCHES_DELTA) FETCHES,
        SUM(END_OF_FETCH_COUNT_DELTA) END_OF_FETCH_COUNT,
        SUM(EXECUTIONS_DELTA) EXECUTIONS,
        MAX(SHARABLE_MEM) SHARABLE_MEM,
        HSQ.PLAN_HASH_VALUE
      FROM
        BASIS_INFO BI,
        DBA_HIST_SQLSTAT HSQ,
        SNAPSHOTS SS,
        V$INSTANCE I
      WHERE
        HSQ.DBID = BI.DBID AND
        I.INSTANCE_NUMBER = HSQ.INSTANCE_NUMBER AND
        HSQ.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
        HSQ.SQL_ID = BI.SQL_ID
      GROUP BY
        HSQ.PLAN_HASH_VALUE
      ORDER BY
        HSQ.PLAN_HASH_VALUE
    )
    WHERE
      ELAPSED_TIME_MS > 0
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'VIEW DEFINITIONS (V$SQL, V$OBJECT_DEPENDENCY, ' ||
      'OBJECTS, DBMS_METADATA.GET_DDL), NO SYS* VIEWS, ' ||
      'truncated to 4000 characters:' FROM DUAL
)
UNION ALL
( SELECT '(only available if statement is in V$SQL)' FROM DUAL
)
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      DECODE(I, 1, ' ',
                2, VIEW_NAME || ':',
                3, ' ',
                TRANSLATE(TRANSLATE(SUBSTR(VIEW_DEFINITION, 1 + (I - 4) * 80,
                  80), CHR(10), ' '), CHR(9), ' ')) LINE
    FROM
    ( SELECT DISTINCT
        VI.VIEW_NAME,
        TO_CHAR(SUBSTR(DBMS_METADATA.GET_DDL('VIEW', VI.VIEW_NAME, VI.OWNER), 1, 4000))
          VIEW_DEFINITION
      FROM
        VIEW_INFO VI ) V,
    ( SELECT ROWNUM I FROM DBA_HIST_SQLTEXT WHERE ROWNUM <= 52 ) C
    WHERE
      DBMS_LOB.GETLENGTH("VIEW_DEFINITION") > (I - 4) * 80
    ORDER BY
      VIEW_NAME,
      I
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'EXECUTION PLAN (V$SQL_PLAN, DBA_HIST_SQL_PLAN):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    DISTINCT LINE
  FROM
  ( SELECT
      'SQL PROFILE ''' || SQL_PROFILE || ''' USED' LINE
    FROM
      V$SQL VS,
      BASIS_INFO BI
    WHERE
      VS.SQL_ID = BI.SQL_ID AND
      SQL_PROFILE IS NOT NULL
    UNION
    ( SELECT
        'SQL PROFILE ''' || SQL_PROFILE || ''' USED' LINE
      FROM
        DBA_HIST_SQLSTAT DHS,
        BASIS_INFO BI
      WHERE
        DHS.SQL_ID = BI.SQL_ID AND
        SQL_PROFILE IS NOT NULL
    )
    UNION
    ( SELECT
        'SQL PLAN BASELINE ''' || SQL_PLAN_BASELINE || ' USED' LINE
      FROM
        V$SQL VS,
        BASIS_INFO BI
      WHERE
        VS.SQL_ID = BI.SQL_ID AND
        SQL_PLAN_BASELINE IS NOT NULL
    )
    UNION
    ( SELECT
        'SQL PATCH ''' || SQL_PATCH || '''USED' LINE
      FROM
        V$SQL VS,
        BASIS_INFO BI
      WHERE
        VS.SQL_ID = BI.SQL_ID AND
        SQL_PATCH IS NOT NULL
    )
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD(ID, 5) ||
    RPAD(' ' || SQL_PLAN_STEP, 230) LINE
  FROM
  ( SELECT
      LPAD(DECODE(L.NUM, 1, TO_CHAR(SP.ID), ' '), 4) ID,
      LPAD(' ', SP.DEPTH * 2) ||
        DECODE(L.CONTENT,
          'ACTION',           ACTION_INFO || DECODE(SP.ID, 0,
                              ' (Plan Hash: ' || SP.PLAN_HASH_VALUE ||
                              ', Child: ' || SP.CHILD_NUMBER ||
                              DECODE(OPTIMIZER, NULL, NULL, ', Optimizer: "' ||
                              OPTIMIZER || '"') || ')'),
          'COST',             '  ' || COST_INFO,
          'SEARCH COLUMNS',   '  ' || SEARCH_COLUMNS_INFO,
          'ACCESS PREDICATE', DECODE(PL.POS1, 1, '  ', '    ') ||
                              SUBSTR(PL.PREDICATE_INFO, PL.POS1 + 1, PL.POS2 - PL.POS1),
          'FILTER PREDICATE', DECODE(PL.POS1, 1, '  ', '    ') ||
                              SUBSTR(PL.PREDICATE_INFO, PL.POS1 + 1, PL.POS2 - PL.POS1),
          'SPACE',            '  ' || SPACE_INFO,
          'PARTITION',        '  ' || PARTITION_INFO,
          'PX',               '  ' || PX_INFO,
          'PLAN STATISTICS',  '  ' || PLAN_STATISTICS_INFO,
          'EMPTY',            ' ') SQL_PLAN_STEP
    FROM
      LINES L,
      SQL_PLANS SP,
      PRED_START_END_LINE_POSITIONS PL
    WHERE
      ( L.CONTENT = 'ACTION' AND PL.LINE = 1 OR
        L.CONTENT = 'COST' AND SP.COST_INFO IS NOT NULL AND PL.LINE = 1  OR
        L.CONTENT = 'SEARCH COLUMNS' AND SP.SEARCH_COLUMNS_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'ACCESS PREDICATE' AND SP.ACCESS_PREDICATE_INFO IS NOT NULL AND
          PL.PREDICATE_TYPE = 'ACCESS' AND PL.PLAN_HASH_VALUE = SP.PLAN_HASH_VALUE AND
          PL.CHILD_NUMBER = SP.CHILD_NUMBER AND PL.ID = SP.ID OR
        L.CONTENT = 'FILTER PREDICATE' AND SP.FILTER_PREDICATE_INFO IS NOT NULL AND
          PL.PREDICATE_TYPE = 'FILTER' AND PL.PLAN_HASH_VALUE = SP.PLAN_HASH_VALUE AND
          PL.CHILD_NUMBER = SP.CHILD_NUMBER AND PL.ID = SP.ID OR
        L.CONTENT = 'SPACE'            AND SP.SPACE_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'PARTITION'        AND SP.PARTITION_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'PX'               AND SP.PX_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'PLAN STATISTICS'  AND SP.PLAN_STATISTICS_INFO IS NOT NULL AND PL.LINE = 1 OR
        L.CONTENT = 'EMPTY' AND PL.LINE = 1
      )
    ORDER BY
      SP.PLAN_HASH_VALUE,
      SP.CHILD_NUMBER,
      SP.ID,
      L.NUM,
      PL.POS1
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SQL WORKAREAS (V$SQL_WORKAREA):' LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('OPERATION_ID ', 13) ||
    RPAD('OPERATION_TYPE', 40) ||
    LPAD('LAST_MEMORY_USED', 17) ||
    LPAD('LAST_TEMPSEG_SIZE', 18) ||
    LPAD('MAX_TEMPSEG_SIZE', 17) ||
    LPAD('OPTIMAL_EXECUTIONS', 19) ||
    LPAD('ONEPASS_EXECUTIONS', 19) ||
    LPAD('MULTIPASSES_EXECUTIONS', 23) LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      LPAD(OPERATION_ID || ' ', 13) ||
      RPAD(OPERATION_TYPE, 40) ||
      LPAD(LAST_MEMORY_USED, 17) ||
      LPAD(NVL(TO_CHAR(LAST_TEMPSEG_SIZE), ' '), 18) ||
      LPAD(NVL(TO_CHAR(MAX_TEMPSEG_SIZE), ' '), 17) ||
      LPAD(OPTIMAL_EXECUTIONS, 19) ||
      LPAD(ONEPASS_EXECUTIONS, 19) ||
      LPAD(MULTIPASSES_EXECUTIONS, 23) LINE
    FROM
      BASIS_INFO BI,
      V$SQL_WORKAREA SWA
    WHERE
      SWA.SQL_ID = BI.SQL_ID
    ORDER BY
      OPERATION_ID
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'ACTIVE SQL WORKAREAS (V$SQL_WORKAREA_ACTIVE):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('OPERATION_ID ', 13) ||
    RPAD('OPERATION_TYPE', 40) ||
    LPAD('MAX_MEMORY_USED', 17) ||
    LPAD('TEMPSEG_SIZE', 18) ||
    LPAD('NUMBER_PASSES', 14) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      LPAD(OPERATION_ID || ' ', 13) ||
      RPAD(OPERATION_TYPE, 40) ||
      LPAD(MAX_MEM_USED, 17) ||
      LPAD(NVL(TO_CHAR(TEMPSEG_SIZE), ' '), 18) ||
      LPAD(NUMBER_PASSES, 14) LINE
    FROM
      BASIS_INFO BI,
      V$SQL_WORKAREA_ACTIVE SWA
    WHERE
      SWA.SQL_ID = BI.SQL_ID
    ORDER BY
      OPERATION_ID
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'TEMPORARY SEGMENTS (V$TEMPSEG_USAGE):' LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('TABLESPACE_NAME', 32) ||
    RPAD('CONTENTS', 10) ||
    RPAD('SEGTYPE', 10) ||
    LPAD('SIZE_MB', 10) LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD(TSU.TABLESPACE, 32) ||
      RPAD(TSU.CONTENTS, 10) ||
      RPAD(TSU.SEGTYPE, 10) ||
      TO_CHAR(SUM(TSU.BLOCKS * TS.BLOCK_SIZE) / 1024 / 1024, 999990.99) LINE
    FROM
      BASIS_INFO BI,
      V$TEMPSEG_USAGE TSU,
      DBA_TABLESPACES TS
    WHERE
      TSU.SQL_ID = BI.SQL_ID AND
      TSU.TABLESPACE = TS.TABLESPACE_NAME
    GROUP BY
      TSU.TABLESPACE,
      TSU.CONTENTS,
      TSU.SEGTYPE
    ORDER BY
      SUM(TSU.BLOCKS * TS.BLOCK_SIZE) DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'ACTIVE SESSION HISTORY INFORMATION (DBA_HIST_ACTIVE_SESS_HISTORY):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD('USER_NAME', 30) ||
      RPAD('SQL_TYPE', 30) ||
      RPAD('MODULE', 50) ||
      RPAD('MOD_ACTION', 30) ||
      RPAD('TOP_LEVEL_SQL_ID', 17) LINE
    FROM DUAL
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(ASH.USER_NAME, 30) ||
        RPAD(ASH.SQL_OPNAME, 30) ||
        RPAD(ASH.MODULE, 50) ||
        RPAD(NVL(ASH.MOD_ACTION, ' '), 30) ||
        RPAD(NVL(ASH.TOP_LEVEL_SQL_ID, ' '), 17) LINE
      FROM
        ASH_DISTRIBUTION ASH
      WHERE
        ROWNUM = 1
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LPAD('AVG_CONCURRENT_EXECUTIONS', 26) ||
        LPAD('MAX_CONCURRENT_EXECUTIONS', 26) ||
        LPAD('MAX_PGA_MB', 26) ||
        LPAD('MAX_TEMP_MB', 26) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LPAD(TO_CHAR(AVG(SUM(OCCURRENCES)), 999999990.99), 26) ||
        LPAD(TO_CHAR(MAX(SUM(OCCURRENCES)), 999999990), 26) ||
        LPAD(TO_CHAR(MAX(MAX(NVL(MAX_PGA_MB, 0))), 999999990.99), 26) ||
        LPAD(TO_CHAR(MAX(MAX(NVL(MAX_TEMP_MB, 0))), 999999990.99), 26) LINE
      FROM
        ASH_DISTRIBUTION
      GROUP BY
        SAMPLE_TIME
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        LPAD('PLAN_ID', 8) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          LPAD(PLAN_ID, 8) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          PLAN_ID
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('CLIENT_ID', 26) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          LINE
        FROM
        (
          SELECT
            RPAD(PLAN_HASH_VALUE, 11) ||
            RPAD(CLIENT_ID, 26) ||
            LPAD(SUM(OCCURRENCES), 12) ||
            TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
            TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE,
            RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100 PCT_PER_PLAN
          FROM
            ASH_DISTRIBUTION
          GROUP BY
            PLAN_HASH_VALUE,
            CLIENT_ID
          ORDER BY
            PLAN_HASH_VALUE,
            SUM(OCCURRENCES) DESC
        )
        WHERE
          PCT_PER_PLAN >= 1
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('SEGMENT_NAME', 35) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          RPAD(OBJECT_NAME, 35) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          OBJECT_NAME
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('EVENT', 50) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          RPAD(EVENT, 50) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          EVENT
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('ACTIVITY', 30) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          RPAD(NVL(ACTIVITY, ' '), 30) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          ACTIVITY
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('PLAN_HASH', 11) ||
        RPAD('SEGMENT_NAME', 35) ||
        RPAD('EVENT', 50) ||
        LPAD('SAMPLES', 12) ||
        LPAD('PLAN_PCT', 9) ||
        LPAD('TOTAL_PCT', 10) ||
        LPAD('BLOCKS_PER_WAIT', 16) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(PLAN_HASH_VALUE, 11) ||
          RPAD(OBJECT_NAME, 35) ||
          RPAD(EVENT, 50) ||
          LPAD(SUM(OCCURRENCES), 12) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100, 99990.99) ||
          TO_CHAR(RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100, 999990.99) ||
          DECODE(WAIT_CLASS, 'User I/O', DECODE(EVENT, 'Data file init write', ' ',
            TO_CHAR(SUM(BLOCKS_ACCESSED) / SUM(OCCURRENCES), 999999999990.99)), ' ') LINE
        FROM
          ASH_DISTRIBUTION
        GROUP BY
          PLAN_HASH_VALUE,
          EVENT,
          WAIT_CLASS,
          OBJECT_NAME
        ORDER BY
          PLAN_HASH_VALUE,
          SUM(OCCURRENCES) DESC
      )
    )
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'TOP HOURS (DBA_HIST_ACTIVE_SESS_HISTORY):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('PLAN_HASH', 11) ||
    RPAD('HOUR', 20) ||
    LPAD('PLAN_PCT', 9) ||
    LPAD('TOTAL_PCT', 10) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD(PLAN_HASH_VALUE, 11) ||
      RPAD(HOUR || ':00:00', 20) ||
      TO_CHAR(PLAN_PCT, 99990.99) ||
      TO_CHAR(TOTAL_PCT, 999990.99) LINE
    FROM
    ( SELECT
        PLAN_HASH_VALUE,
        HOUR,
        RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER (PARTITION BY PLAN_HASH_VALUE) * 100 PLAN_PCT,
        RATIO_TO_REPORT(SUM(OCCURRENCES)) OVER () * 100 TOTAL_PCT
      FROM
        ASH_DISTRIBUTION
      GROUP BY
        PLAN_HASH_VALUE,
        HOUR
    )
    WHERE
      TOTAL_PCT >= 2
    ORDER BY
      PLAN_HASH_VALUE,
      PLAN_PCT DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( ( SELECT
        'SEGMENT STATISTICS (V$SEGMENT_STATISTICS):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('SEGMENT_NAME', 35) || LPAD('LOG_READS', 12) || LPAD('PHYS_READS', 12) ||
        LPAD('DIR_READS', 12) || LPAD('PHYS_WRITES', 12) || LPAD('DIR_WRITES', 12) ||
        LPAD('ITL_WAITS', 12) || LPAD('ROW_LOCKS', 12) || LPAD('BUFFER_BUSY', 12) ||
        LPAD('BLK_CHANGES', 12) || LPAD('SEGMENT_SCANS', 14) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT * FROM
      ( SELECT
          RPAD(O.OBJECT_NAME, 35) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'logical reads', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'physical reads', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'physical reads direct', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'physical writes', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'physical writes direct', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'ITL waits', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'row lock waits', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'buffer busy waits', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'db block changes', VALUE, 0)), 12) ||
          LPAD(SUM(DECODE(STATISTIC_NAME, 'segment scans', VALUE, 0)), 14) LINE
        FROM V$SEGSTAT SS, OBJECTS O
        WHERE
          SS.OBJ# = O.OBJECT_ID AND
          ( O.OBJECT_TYPE IN ( 'TABLE', 'TABLE PARTITION' ) AND
            ( O.OWNER, O.OBJECT_NAME ) IN
            ( SELECT TABLE_OWNER, TABLE_NAME FROM TABLE_INFO
            ) OR
            O.OBJECT_TYPE IN ( 'INDEX', 'INDEX PARTITION' ) AND
            ( O.OWNER, O.OBJECT_NAME ) IN
            ( SELECT INDEX_OWNER, INDEX_NAME FROM INDEX_INFO
          ) )
        GROUP BY O.OBJECT_NAME
        ORDER BY O.OBJECT_NAME
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'SEGMENT STATISTICS (DBA_HIST_SEG_STAT):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('SEGMENT_NAME', 35) ||
        LPAD('LOG_READS', 12) ||
        LPAD('PHYS_READS', 12) ||
        LPAD('DIR_READS', 12) ||
        LPAD('PHYS_WRITES', 12) ||
        LPAD('DIR_WRITES', 12) ||
        LPAD('ITL_WAITS', 12) ||
        LPAD('ROW_LOCKS', 12) ||
        LPAD('BUFFER_BUSY', 12) ||
        LPAD('BLK_CHANGES', 12) ||
        LPAD('SEGMENT_SCANS', 14) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(SEGMENT_NAME, 35) || LPAD(LOGICAL_READS, 12) || LPAD(PHYSICAL_READS, 12) ||
          LPAD(PHYSICAL_READS_DIRECT, 12) || LPAD(PHYSICAL_WRITES, 12) ||
          LPAD(PHYSICAL_WRITES_DIRECT, 12) || LPAD(ITL_WAITS, 12) ||
          LPAD(ROW_LOCK_WAITS, 12) || LPAD(BUFFER_BUSY_WAITS, 12) ||
          LPAD(DB_BLOCK_CHANGES, 12) || LPAD(SEGMENT_SCANS, 14) LINE
        FROM
          SEGMENT_STATISTICS SS
        WHERE
          ( SS.SEG_TYPE IN ( 'TABLE', 'TABLE PARTITION' ) AND
            ( SS.OWNER, SS.SEGMENT_NAME ) IN
            ( SELECT TABLE_OWNER, TABLE_NAME
              FROM TABLE_INFO
            ) OR
            SS.SEG_TYPE IN ( 'INDEX', 'INDEX PARTITION' ) AND
            ( SS.OWNER, SS.SEGMENT_NAME ) IN
            ( SELECT INDEX_OWNER, INDEX_NAME
              FROM INDEX_INFO
            )
          )
        ORDER BY
          SEGMENT_NAME
      )
    )
    UNION ALL ( SELECT  ' ' FROM DUAL )
    UNION ALL ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL ( SELECT  ' ' FROM DUAL )
    UNION ALL ( SELECT 'INDEX COLUMNS (DBA_INDEXES):' FROM DUAL )
    UNION ALL ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('TABLE_NAME', 30) ||
        RPAD('INDEX_NAME', 35) ||
        RPAD('COLUMN_NAME', 30) ||
        LPAD('NUM_DISTINCT', 12) ||
        LPAD('AVG_COL_LEN', 12) ||
        LPAD('COLUMN_POSITION', 16) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(DECODE(TABLE_NAME, LAG(TABLE_NAME, 1) OVER
          (ORDER BY TABLE_NAME, INDEX_NAME, COLUMN_POSITION),
          ' ', TABLE_NAME), 30) ||
        RPAD(DECODE(INDEX_NAME, LAG(INDEX_NAME, 1) OVER
          (ORDER BY TABLE_NAME, INDEX_NAME, COLUMN_POSITION),
          ' ', INDEX_NAME), 35) ||
        RPAD(COLUMN_NAME, 30) ||
        LPAD(NVL(TO_CHAR(NUM_DISTINCT), ' '), 12) ||
        LPAD(NVL(TO_CHAR(AVG_COL_LEN), ' '), 12) ||
        LPAD(COLUMN_POSITION, 16) LINE
      FROM
      ( SELECT
          *
        FROM
        ( SELECT
            I.TABLE_NAME,
            I.INDEX_NAME,
            I.COLUMN_NAME,
            I.COLUMN_POSITION,
            T.AVG_COL_LEN,
            T.NUM_DISTINCT,
            ROWNUM ROWNUMBER
          FROM
            TABLE_INFO TI,
            DBA_IND_COLUMNS I,
            DBA_TAB_COLUMNS T,
            BASIS_INFO BI
          WHERE
            BI.INDEX_COLUMNS = 'X' AND
            I.TABLE_OWNER = TI.TABLE_OWNER AND
            I.TABLE_NAME = TI.TABLE_NAME AND
            I.TABLE_OWNER = T.OWNER AND
            I.TABLE_NAME = T.TABLE_NAME AND
            I.COLUMN_NAME = T.COLUMN_NAME
          UNION ALL
          ( SELECT
              I.TABLE_NAME,
              I.INDEX_NAME,
              'Function' COLUMN_NAME,
              I.COLUMN_POSITION,
              NULL AVG_COL_LEN,
              NULL NUM_DISTINCT,
              ROWNUM ROWNUMBER
            FROM
              TABLE_INFO TI,
              DBA_IND_COLUMNS I,
              DBA_IND_EXPRESSIONS IE,
              BASIS_INFO BI
            WHERE
              BI.INDEX_COLUMNS = 'X' AND
              I.TABLE_OWNER = TI.TABLE_OWNER AND
              I.TABLE_NAME = TI.TABLE_NAME AND
              I.INDEX_OWNER = IE.INDEX_OWNER AND
              I.INDEX_NAME = IE.INDEX_NAME AND
              I.COLUMN_POSITION = IE.COLUMN_POSITION
          )
        )
        ORDER BY
          TABLE_NAME,
          INDEX_NAME,
          COLUMN_POSITION
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'CBO STATISTICS (DBA_TAB_STATISTICS, DBA_INDEXES, DBA_TAB_COLUMNS, DBA_TAB_STATS_HISTORY, DBA_OPTSTAT_OPERATIONS):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'TABLE STATISTICS:' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OWNER', 10) ||
        RPAD('TABLE_NAME', 35) ||
        RPAD('PARTITION_NAME', 30) ||
        LPAD('NUM_ROWS', 12) ||
        LPAD('BLOCKS', 10) ||
        LPAD('AVG_ROW_LEN', 12) ||
        LPAD('LAST_ANALYZED', 22) ||
        LPAD('SAMPLE_SIZE', 12) ||
        LPAD('CREATION_TIME', 22) ||
        LPAD('LAST_DDL_TIME', 22) ||
        LPAD('USER_STATS', 11) ||
        LPAD('INI_TRANS', 10) ||
        LPAD('PCT_FREE', 9) ||
        LPAD('DEGREE', 8) ||
        RPAD(' COMPRESS', 9) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          LINE
        FROM
        ( SELECT /*+ LEADING(TS) */
            RPAD(T.OWNER, 10) ||
            RPAD(T.TABLE_NAME, 35) ||
            RPAD(NVL(T.PARTITION_NAME, ' '), 30) ||
            LPAD(NVL(TO_CHAR(T.NUM_ROWS), ' '), 12) ||
            LPAD(NVL(TO_CHAR(T.BLOCKS), ' '), 10) ||
            LPAD(NVL(TO_CHAR(T.AVG_ROW_LEN), ' '), 12) ||
            LPAD(DECODE(T.LAST_ANALYZED, NULL, ' ', TO_CHAR(T.LAST_ANALYZED, 'YYYY-MM-DD HH24:MI:SS')), 22) ||
            LPAD(NVL(TO_CHAR(T.SAMPLE_SIZE), '0'), 12) ||
            LPAD(DECODE(O.CREATED, NULL, ' ', TO_CHAR(O.CREATED,
              'YYYY-MM-DD HH24:MI:SS')), 22) ||
            LPAD(DECODE(O.LAST_DDL_TIME, NULL, ' ', TO_CHAR(O.LAST_DDL_TIME, 'YYYY-MM-DD HH24:MI:SS')), 22) ||
            LPAD(T.USER_STATS, 11) ||
            LPAD(DECODE(T.PARTITION_NAME, NULL, TO_CHAR(TS.INI_TRANS), ' '), 10) ||
            LPAD(DECODE(T.PARTITION_NAME, NULL, TO_CHAR(TS.PCT_FREE), ' '), 9) ||
            LPAD(TS.DEGREE, 8) ||
            RPAD(' ' || TS.COMPRESSION, 9) LINE,
            T.OWNER,
            T.TABLE_NAME,
            NVL(T.PARTITION_POSITION, 0) PARTITION_POSITION
          FROM
            TABLE_STORAGE TS,
            DBA_TAB_STATISTICS T,
            OBJECTS O
          WHERE
            TS.TABLE_OWNER = T.OWNER AND
            TS.TABLE_NAME = T.TABLE_NAME AND
            NVL(TS.PARTITION_NAME, ' ') = NVL(T.PARTITION_NAME, ' ') AND
            T.OWNER = O.OWNER AND
            T.TABLE_NAME = O.OBJECT_NAME AND
            NVL(T.PARTITION_NAME, ' ') = NVL(O.SUBOBJECT_NAME, ' ') AND
            O.OBJECT_TYPE IN ('TABLE', 'TABLE PARTITION')
        )
        ORDER BY
          OWNER,
          TABLE_NAME,
          PARTITION_POSITION
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'INDEX STATISTICS (INDEX PARTITIONS ARE NOT CONSIDERED):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('INDEX_NAME', 30) ||
        LPAD('NUM_ROWS', 12) ||
        LPAD('LEAF_BLOCKS', 12) ||
        LPAD('DISTINCT_KEYS', 14) ||
        LPAD('CLUST_FACTOR', 13) ||
        LPAD('BLEVEL', 7) ||
        LPAD('LAST_ANALYZED', 20) ||
        LPAD('SAMPLE_SIZE', 12) ||
        RPAD(' INDEX_TYPE', 12) ||
        RPAD('UNIQUE', 7) ||
        LPAD('CREATION_TIME', 20) ||
        LPAD('LAST_DDL_TIME', 20) ||
        LPAD('USER_STATS', 11) ||
        LPAD('INI_TRANS', 10) ||
        LPAD('PCT_FREE', 9) ||
        LPAD('DEGREE', 8) ||
        LPAD('VISIBLE', 8) ||
        RPAD(' COMPRESS', 10) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(I.INDEX_NAME, 30) ||
          LPAD(NVL(TO_CHAR(I.NUM_ROWS), ' '), 12) ||
          LPAD(NVL(TO_CHAR(I.LEAF_BLOCKS), ' '), 12) ||
          LPAD(NVL(TO_CHAR(I.DISTINCT_KEYS), ' '), 14) ||
          LPAD(NVL(TO_CHAR(I.CLUSTERING_FACTOR), ' '), 13) ||
          LPAD(NVL(TO_CHAR(I.BLEVEL), ' '), 7) ||
          LPAD(DECODE(I.LAST_ANALYZED, NULL, ' ', TO_CHAR(I.LAST_ANALYZED, 'YYYY-MM-DD HH24:MI:SS')), 20) ||
          LPAD(NVL(TO_CHAR(I.SAMPLE_SIZE), ' '), 12) ||
          RPAD(' ' || I.INDEX_TYPE, 12) ||
          RPAD(DECODE(I.UNIQUENESS, 'UNIQUE', 'YES', 'NO'), 7) ||
          LPAD(TO_CHAR(O.CREATED, 'YYYY-MM-DD HH24:MI:SS'), 20) ||
          LPAD(TO_CHAR(O.LAST_DDL_TIME, 'YYYY-MM-DD HH24:MI:SS'), 20) ||
          LPAD(I.USER_STATS, 11) ||
          LPAD(I.INI_TRANS, 10) ||
          LPAD(I.PCT_FREE, 9) ||
          LPAD(I.DEGREE, 8) ||
          LPAD(DECODE(I.VISIBILITY, 'INVISIBLE', 'NO', 'YES'), 8) ||
          RPAD(' ' || DECODE(II.COMPRESSION, 'YES', II.COMPRESSION ||
            ' (' || II.PREFIX_LENGTH || ')', II.COMPRESSION), 10) LINE
        FROM
          DBA_INDEXES I, OBJECTS O, INDEX_INFO II
        WHERE
          I.INDEX_TYPE != 'LOB' AND
          I.OWNER = O.OWNER AND
          I.INDEX_NAME = O.OBJECT_NAME AND
          O.SUBOBJECT_NAME IS NULL AND
          I.OWNER = II.INDEX_OWNER AND
          I.INDEX_NAME = II.INDEX_NAME AND
          O.OBJECT_TYPE = 'INDEX'
        ORDER BY
          I.OWNER,
          I.TABLE_NAME,
          I.INDEX_NAME
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'COLUMN STATISTICS:' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('TABLE_NAME', 30) ||
        RPAD('COLUMN_NAME', 25) ||
        LPAD('NUM_DISTINCT', 13) ||
        LPAD('DENSITY', 9) ||
        LPAD('NUM_BUCKETS', 12) ||
        LPAD('AVG_COL_LEN', 12) ||
        LPAD('DATA_LENGTH', 12) ||
        LPAD('NULLABLE', 9) ||
        LPAD('NUM_NULLS', 12) ||
        RPAD(' DATA_TYPE', 20) ||
        LPAD('LAST_ANALYZED', 22) ||
        LPAD('SAMPLE_SIZE', 12) ||
        LPAD('USER_STATS', 11) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(DECODE(TCS.TABLE_NAME, LAG(TCS.TABLE_NAME, 1) OVER
            (ORDER BY TCS.OWNER, TCS.TABLE_NAME, TCS.COLUMN_NAME),
            ' ', TCS.TABLE_NAME), 30) ||
          RPAD(TCS.COLUMN_NAME, 25) ||
          LPAD(NVL(TO_CHAR(TCS.NUM_DISTINCT), ' '), 13) ||
          LPAD(DECODE(TCS.DENSITY, NULL, ' ', TO_CHAR(TCS.DENSITY, 90.999999)), 9) ||
          LPAD(NVL(TO_CHAR(TCS.NUM_BUCKETS), ' '), 12) ||
          LPAD(NVL(TO_CHAR(TCS.AVG_COL_LEN), ' '), 12) ||
          LPAD(NVL(TO_CHAR(TCS.DATA_LENGTH), ' '), 12) ||
          LPAD(NVL(TCS.NULLABLE, ' '), 9) ||
          LPAD(NVL(TO_CHAR(TCS.NUM_NULLS), ' '), 12) ||
          RPAD(' ' || TCS.DATA_TYPE, 20) ||
          LPAD(DECODE(TCS.LAST_ANALYZED, NULL, ' ', TO_CHAR(TCS.LAST_ANALYZED,
            'YYYY-MM-DD HH24:MI:SS')), 22) ||
          LPAD(NVL(TO_CHAR(TCS.SAMPLE_SIZE), ' '), 12) ||
          LPAD(TCS.USER_STATS, 11) LINE
        FROM
          DBA_TAB_COLUMNS TCS, TABLE_INFO TI
        WHERE
          TCS.OWNER = TI.TABLE_OWNER AND
          TCS.TABLE_NAME = TI.TABLE_NAME
        ORDER BY
          TCS.OWNER,
          TCS.TABLE_NAME,
          TCS.COLUMN_NAME
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'TABLE STATISTICS HISTORY:'
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OWNER', 10) ||
        RPAD('TABLE_NAME', 35) ||
        RPAD('PARTITION_NAME', 30) ||
        LPAD('STATS_UPDATE_TIME', 22)
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(DECODE(ROW_NUM, 1, OWNER, ' '), 10) ||
        RPAD(DECODE(ROW_NUM, 1, TABLE_NAME, ' '), 35) ||
        RPAD(DECODE(ROW_NUM, 1, NVL(PARTITION_NAME, ' '), ' '), 30) ||
        LPAD(TO_CHAR(STATS_UPDATE_TIME, 'YYYY-MM-DD HH24:MI:SS'), 22) LINE
      FROM
      ( SELECT
          TSH.OWNER,
          TSH.TABLE_NAME,
          TSH.PARTITION_NAME,
          TSH.STATS_UPDATE_TIME,
          ROW_NUMBER () OVER (PARTITION BY TSH.OWNER, TSH.TABLE_NAME, TS.PARTITION_POSITION
            ORDER BY TSH.STATS_UPDATE_TIME DESC) ROW_NUM
        FROM
          TABLE_STORAGE TS,
          DBA_TAB_STATS_HISTORY TSH
        WHERE
          TS.TABLE_OWNER = TSH.OWNER AND
          TS.TABLE_NAME = TSH.TABLE_NAME AND
          NVL(TS.PARTITION_NAME, ' ') = NVL(TSH.PARTITION_NAME, ' ')
        ORDER BY
          TSH.OWNER,
          TSH.TABLE_NAME,
          TS.PARTITION_POSITION,
          TSH.STATS_UPDATE_TIME DESC
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'COLLECTION OF SPECIAL STATISTICS:'
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OPERATION', 30) ||
        LPAD('START_TIME', 22) ||
        LPAD('END_TIME', 22)
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        *
      FROM
      ( SELECT
          RPAD(OPERATION, 30) ||
          LPAD(TO_CHAR(START_TIME, 'YYYY-MM-DD HH24:MI:SS'), 22) ||
          LPAD(TO_CHAR(END_TIME, 'YYYY-MM-DD HH24:MI:SS'), 22)
        FROM
          DBA_OPTSTAT_OPERATIONS
        WHERE
          SUBSTR(UPPER(OPERATION), 1, 6) = 'GATHER' AND
          OPERATION != 'gather_table_stats'
        ORDER BY
          START_TIME DESC
      )
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'TABLE MODIFICATIONS (DBA_TAB_MODIFICATIONS):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OWNER', 10) ||
        RPAD('TABLE_NAME', 35) ||
        RPAD('PARTITION_NAME', 30) ||
        LPAD('INSERTS', 10) ||
        LPAD('UPDATES', 10) ||
        LPAD('DELETES', 10) ||
        LPAD('TRUNCATED', 10) ||
        LPAD('DROP_SEGMENTS', 14) LINE
      FROM
        DUAL
    )
    UNION ALL ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        LINE
      FROM
      ( SELECT
          RPAD(DTM.TABLE_OWNER, 10) ||
          RPAD(DTM.TABLE_NAME, 35) ||
          RPAD(NVL(DTM.PARTITION_NAME, ' '), 30) ||
          LPAD(DTM.INSERTS, 10) ||
          LPAD(DTM.UPDATES, 10) ||
          LPAD(DTM.DELETES, 10) ||
          LPAD(DTM.TRUNCATED, 10) ||
          LPAD(DTM.DROP_SEGMENTS, 14) LINE
        FROM
          TABLE_INFO TI,
          SYS.DBA_TAB_MODIFICATIONS DTM
        WHERE
          TI.TABLE_OWNER = DTM.TABLE_OWNER AND
          TI.TABLE_NAME = DTM.TABLE_NAME
        ORDER BY
          DTM.TABLE_OWNER,
          DTM.TABLE_NAME
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'FRAGMENTATION INFORMATION (BASED ON CBO STATISTICS):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('SEGMENT_NAME', 30) ||
        RPAD('PARTITION_NAME', 30) ||
        LPAD('UNUSED_MB', 11) ||
        LPAD('QUALITY_%', 10) ||
        LPAD('SEG_GROSS_MB', 13) ||
        LPAD('SEG_NET_MB', 11) ||
        LPAD('DATA_GROSS_MB', 14) ||
        LPAD('DATA_NET_MB', 12) ||
        RPAD(' RESTRICTIONS', 120) LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(DECODE(SEGMENT_NAME, LAG(SEGMENT_NAME, 1) OVER (ORDER BY 1), ' ', SEGMENT_NAME), 30) ||
        RPAD(NVL(PARTITION_NAME, ' '), 30) ||
        LPAD(NVL(TO_CHAR(UNUSED_MB, 999990.99), ' '), 11) ||
        LPAD(NVL(TO_CHAR(QUALITY, 99990.99), ' '), 10) ||
        LPAD(NVL(TO_CHAR(SEG_GROSS_MB, 99999990.99), ' '), 13) ||
        LPAD(NVL(TO_CHAR(SEG_NET_MB, 9999990.99), ' '), 11) ||
        LPAD(NVL(TO_CHAR(DATA_GROSS_MB, 999999990.99), ' '), 14) ||
        LPAD(NVL(TO_CHAR(DATA_NET_MB, 9999990.99), ' '), 12) ||
        RPAD(' ' || RESTRICTIONS, 120) LINE
      FROM
      ( SELECT
          SEGMENT_NAME,
          PARTITION_NAME,
          SEG_GROSS_MB,
          SEG_NET_MB,
          DATA_GROSS_MB,
          DATA_NET_MB,
          UNUSED_MB,
          DECODE(UNUSED_MB + DATA_NET_MB, 0, 0, DATA_NET_MB / (UNUSED_MB + DATA_NET_MB) * 100) QUALITY,
          RESTRICTIONS,
          PARTITION_POSITION
        FROM
        ( SELECT
            SEGMENT_NAME,
            PARTITION_NAME,
            DECODE(CLUSTER_TABLE, 'YES', DATA_GROSS_MB * 1.1, SEG_GROSS_MB) SEG_GROSS_MB,
            DECODE(CLUSTER_TABLE, 'YES', DATA_GROSS_MB, SEG_NET_MB) SEG_NET_MB,
            DATA_GROSS_MB + GREATEST(0, CHANGE_MB) DATA_GROSS_MB,
            GREATEST(0, DATA_NET_MB + CHANGE_MB) DATA_NET_MB,
            LEAST(SEG_GROSS_MB, GREATEST(DATA_GROSS_MB + GREATEST(0, CHANGE_MB), SEG_NET_MB)) -
              DATA_NET_MB - CHANGE_MB UNUSED_MB,
            DECODE(USER_STATS,        'YES', 'STATISTICS MODIFIED   ') ||
              DECODE(LONG_RAW,        'YES', 'LONG RAW   ') ||
              DECODE(LOB,             'YES', 'LOB   ') ||
              DECODE(STATTYPE_LOCKED, 'ALL', 'STATISTICS LOCKED   ') ||
              DECODE(RECREATED,       'YES', 'STATISTICS OLDER THAN SEGMENT   ') ||
              DECODE(AVG_ROW_LEN,     0,     'ROW LENGTH = 0   ') ||
              DECODE(SIGN(SEG_GROSS_MB - 5),    -1, 'SMALL TABLE   ') ||
              DECODE(CLUSTER_TABLE,   'YES', 'CLUSTER TABLE   ')
              RESTRICTIONS,
            TABLE_NAME,
            BYTES,
            PARTITION_POSITION,
            INDEX_NAME
          FROM
          ( SELECT
              TS.TABLE_OWNER,
              TS.TABLE_NAME SEGMENT_NAME,
              NVL(TS.PARTITION_NAME, ' ') PARTITION_NAME,
              DECODE(CLUSTER_TABLE, 'YES', DTS.BLOCKS * (8000 - 23 * TS.INI_TRANS) *
                (1 - TS.PCT_FREE / 100) / 1024 / 1024 * 1.1, S.BYTES / 1024 / 1024) SEG_GROSS_MB,
              DECODE(CLUSTER_TABLE, 'YES', DTS.BLOCKS * (8000 - 23 * TS.INI_TRANS) *
                (1 - TS.PCT_FREE / 100) / 1024 / 1024, (S.BYTES / 1024 / 1024) * (8000 - 23 *
                TS.INI_TRANS) * (1 - TS.PCT_FREE / 100) / 8192) SEG_NET_MB,
              DTS.BLOCKS * (8000 - 23 * TS.INI_TRANS) * (1 - TS.PCT_FREE / 100) / 1024 / 1024 DATA_GROSS_MB,
              (DTS.AVG_ROW_LEN + 2) * DTS.NUM_ROWS / 1024 / 1024 DATA_NET_MB,
              DTS.NUM_ROWS,
              DTS.AVG_ROW_LEN,
              DTS.BLOCKS,
              DTS.USER_STATS,
              DTC.LONG_RAW,
              DTC.LOB,
              DECODE(SIGN(NVL(DTS.LAST_ANALYZED, SYSDATE) - S.CREATED), -1, 'YES', 'NO') RECREATED,
              DTS.STATTYPE_LOCKED,
              DTS.AVG_ROW_LEN * (TM.INSERTS - TM.DELETES) / 1024 / 1024 CHANGE_MB,
              TS.TABLE_NAME,
              S.BYTES,
              TS.CLUSTER_TABLE,
              TS.PARTITION_POSITION,
              ' ' INDEX_NAME
            FROM
              TABLE_STORAGE TS,
              TABLE_MODIFICATIONS TM,
              DBA_TAB_STATISTICS DTS,
              TABLE_COLUMNS DTC,
              SEGMENTS S,
              BASIS_INFO BI
            WHERE
              TS.TABLE_OWNER = DTS.OWNER AND
              TS.TABLE_NAME = DTS.TABLE_NAME AND
              NVL(TS.PARTITION_NAME, ' ') = NVL(DTS.PARTITION_NAME, ' ') AND
              DTS.OWNER = S.OWNER (+) AND
              DTS.TABLE_NAME = S.SEGMENT_NAME (+) AND
              NVL(DTS.PARTITION_NAME, ' ') = NVL(S.PARTITION_NAME (+), ' ') AND
              DTS.OWNER = TM.TABLE_OWNER AND
              DTS.TABLE_NAME = TM.TABLE_NAME AND
              NVL(DTS.PARTITION_NAME, ' ') = NVL(TM.PARTITION_NAME, ' ') AND
              DTS.OWNER = DTC.TABLE_OWNER AND
              DTS.TABLE_NAME = DTC.TABLE_NAME AND
              DTS.NUM_ROWS IS NOT NULL AND
              (TS.IOT_TYPE != 'IOT' OR TS.IOT_TYPE IS NULL) AND
              BI.SEGMENT_INFO = 'X'
          )
          UNION ALL
          ( SELECT
              SEGMENT_NAME,
              PARTITION_NAME,
              SEG_GROSS_MB,
              SEG_NET_MB,
              DATA_GROSS_MB + GREATEST(0, CHANGE_MB) DATA_GROSS_MB,
              GREATEST(0, DATA_NET_MB + CHANGE_MB) DATA_NET_MB,
              LEAST(SEG_GROSS_MB, GREATEST(DATA_GROSS_MB + GREATEST(0, CHANGE_MB), SEG_NET_MB)) -
                DATA_NET_MB - CHANGE_MB UNUSED_MB,
              DECODE(  USER_STATS,             'YES',    'STATISTICS MODIFIED   ') ||
                DECODE(STATTYPE_LOCKED,        'ALL',    'STATISTICS LOCKED   ') ||
                DECODE(SIGN(SEG_GROSS_MB - 5), -1,       'SMALL INDEX   ') ||
                DECODE(SIGN(COL_LEN_NULL),     1,        'MISSING COLUMN STATISTICS   ') ||
                DECODE(RECREATED,              'YES',    'STATISTICS OLDER THAN SEGMENT   ') ||
                DECODE(INDEX_TYPE,             'BITMAP', 'BITMAP INDEX   ') ||
                DECODE(IND_ROW_LEN,            0,        'ROW LENGTH = 0   ') ||
                DECODE(LEAF_BLOCKS,            0,        'WRONG VALUE LEAF_BLOCKS = 0   ') ||
                DECODE(COMPRESSION,            'YES',    'COMPRESSED INDEX   ') RESTRICTIONS,
              TABLE_NAME,
              BYTES,
              PARTITION_POSITION,
              INDEX_NAME
            FROM
            ( SELECT
                DIS.OWNER,
                DIS.INDEX_NAME SEGMENT_NAME,
                NVL(DIS.PARTITION_NAME, ' ') PARTITION_NAME,
                S.BYTES / 1024 / 1024 SEG_GROSS_MB,
                (S.BYTES / 1024 / 1024) * (8079 - 23 * IST.INI_TRANS) * (1 - IST.PCT_FREE / 100) / 8192 SEG_NET_MB,
                DIS.LEAF_BLOCKS * (8079 - 23 * IST.INI_TRANS) * (1 - IST.PCT_FREE / 100) / 1024 / 1024 * 1.05 DATA_GROSS_MB,
                DECODE (SUBSTR(IST.INDEX_TYPE, 1, 6),
                  'NORMAL', (IR.IND_ROW_LEN * DIS.NUM_ROWS - DECODE(IST.COMPRESSION, 'NO', 0, IR.COMP_ROW_LEN *
                    GREATEST(0, NUM_ROWS - DECODE(IST.PREFIX_LENGTH, 1, FIRST_NUM_DIST, DISTINCT_KEYS)))) / 1024 / 1024,
                  'BITMAP', (NUM_ROWS * (DECODE(DISTINCT_KEYS, 1, 0.18, 1) + DECODE(DISTINCT_KEYS,
                    0, 0, LOG(35, DISTINCT_KEYS))) + DISTINCT_KEYS * 50) / 1024 / 1024
                  ) * 1.05 DATA_NET_MB,
                DIS.NUM_ROWS,
                DIS.LEAF_BLOCKS LEAF_BLOCKS,
                DIS.USER_STATS,
                DIS.STATTYPE_LOCKED,
                DECODE(SIGN(NVL(DIS.LAST_ANALYZED, SYSDATE) - S.CREATED), -1, 'YES', 'NO') RECREATED,
                IR.COL_LEN_NULL,
                IR.IND_ROW_LEN,
                IR.IND_ROW_LEN * (TM.INSERTS - TM.DELETES) / 1024 / 1024 CHANGE_MB,
                DIS.TABLE_NAME,
                S.BYTES,
                IST.PARTITION_POSITION,
                DIS.INDEX_NAME,
                IST.INDEX_TYPE,
                IST.COMPRESSION
              FROM
                INDEX_STORAGE IST,
                TABLE_MODIFICATIONS TM,
                INDEX_STATISTICS DIS,
                INDEX_ROWS IR,
                SEGMENTS S,
                BASIS_INFO BI
              WHERE
                DIS.OWNER = IST.INDEX_OWNER AND
                DIS.INDEX_NAME = IST.INDEX_NAME AND
                NVL(DIS.PARTITION_NAME, ' ') = NVL(IST.PARTITION_NAME, ' ') AND
                DIS.OWNER = S.OWNER (+) AND
                DIS.INDEX_NAME = S.SEGMENT_NAME (+) AND
                NVL(DIS.PARTITION_NAME, ' ') = NVL(S.PARTITION_NAME (+), ' ') AND
                DIS.OWNER = TM.TABLE_OWNER AND
                DIS.TABLE_OWNER = TM.TABLE_OWNER AND
                DIS.TABLE_NAME = TM.TABLE_NAME AND
                NVL(DIS.PARTITION_NAME, ' ') = NVL(TM.PARTITION_NAME, ' ') AND
                IST.INDEX_NAME = IR.INDEX_NAME AND
                IST.INDEX_OWNER = IR.INDEX_OWNER AND
                IST.INDEX_TYPE IN ( 'NORMAL', 'NORMAL/REV', 'BITMAP' ) AND
                BI.SEGMENT_INFO = 'X'
            )
          )
        )
        ORDER BY
          RPAD(TABLE_NAME, 50) || LPAD(INDEX_NAME, 50) || LPAD(PARTITION_POSITION, 10)
      ) F,
        BASIS_INFO BI
      WHERE
        BI.FRAGMENTATION_INFO = 'X'
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT 'SEGMENT ADVISOR INFORMATION (DBA_ADVISOR_TASKS, DBA_ADVISOR_FINDINGS, DBA_ADVISOR_OBJECTS):' FROM DUAL )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('ANALYSIS_TIME', 20) || RPAD('SEGMENT_NAME', 35) ||
        RPAD('PARTITION_NAME', 30) || RPAD('MESSAGE', 300) LINE
      FROM DUAL
    )
    UNION ALL ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT * FROM
      ( SELECT
          RPAD(TO_CHAR(ANALYSIS_TIME, 'YYYY-MM-DD HH24:MI:SS'), 20) ||
          RPAD(SEGMENT_NAME, 35) ||
          RPAD(NVL(PARTITION_NAME, ' '), 30) ||
          RPAD(MESSAGE, 300)
        FROM
        ( SELECT
            DAT.EXECUTION_START ANALYSIS_TIME,
            DAO.ATTR2 SEGMENT_NAME,
            DAO.ATTR3 PARTITION_NAME,
            DAF.MESSAGE MESSAGE,
            ROW_NUMBER () OVER (PARTITION BY DAO.ATTR2 ORDER BY DAT.EXECUTION_START DESC) ROW_NUM
          FROM
            DBA_ADVISOR_TASKS DAT,
            DBA_ADVISOR_FINDINGS DAF,
            DBA_ADVISOR_OBJECTS DAO
          WHERE
            DAT.OWNER = DAF.OWNER AND
            DAT.TASK_ID = DAF.TASK_ID AND
            DAF.TASK_ID = DAO.TASK_ID AND
            DAF.OBJECT_ID = DAO.OBJECT_ID AND
            DAT.ADVISOR_NAME = 'Segment Advisor' AND
            (DAO.ATTR1, DAO.ATTR2 ) IN
            ( SELECT TABLE_OWNER, TABLE_NAME FROM TABLE_INFO UNION ALL
              SELECT INDEX_OWNER, INDEX_NAME FROM INDEX_INFO )
        )
        WHERE
          ROW_NUM = 1
        ORDER BY
          ANALYSIS_TIME DESC,
          SEGMENT_NAME
      )
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'SEGMENT INFORMATION (DBA_SEGMENTS, DBA_LOBS, DBA_TABLESPACES):' LINE
      FROM DUAL
    )
    UNION ALL
    ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('OWNER', 10) ||
        RPAD('SEGMENT_NAME', 35) ||
        RPAD('PARTITION_NAME', 30) ||
        RPAD('SEGMENT_TYPE', 18) ||
        RPAD('TABLESPACE_NAME', 18) ||
        RPAD('TABLESPACE_TYPE', 25) ||
        RPAD('BUFFER_POOL', 12) ||
        LPAD('SIZE_MB', 15) ||
        LPAD('EXTENTS', 8) ||
        LPAD('INITIAL', 11) ||
        LPAD('NEXT', 9) ||
        LPAD('MIN_EXT', 8) ||
        LPAD('MAX_EXT', 11) ||
        LPAD('FREELISTS', 10) ||
        LPAD('FL_GROUPS', 10) LINE
      FROM DUAL
    )
    UNION ALL ( SELECT  ' ' FROM DUAL )
    UNION ALL
    ( SELECT LINE
      FROM
      ( SELECT LINE
        FROM
        ( SELECT DISTINCT
            RPAD(S.OWNER, 10) ||
            RPAD(DECODE(SUBSTR(S.SEGMENT_TYPE, 1, 3), 'LOB',
              S.LOB_TABLE_NAME || '.' || S.LOB_COLUMN_NAME, S.SEGMENT_NAME), 35) ||
            RPAD(NVL(S.PARTITION_NAME, ' '), 30) ||
            RPAD(S.SEGMENT_TYPE, 18) ||
            RPAD(NVL(S.TABLESPACE_NAME, '-'), 18) ||
            RPAD(S.TABLESPACE_TYPE, 25) ||
            RPAD(S.BUFFER_POOL, 12) ||
            TO_CHAR(NVL(S.BYTES, 0) / 1024 / 1024, 99999999990.99) ||
            LPAD(NVL(S.EXTENTS, 0), 8) ||
            LPAD(NVL(S.INITIAL_EXTENT, 0), 11) ||
            LPAD(NVL(S.NEXT_EXTENT, 0), 9) ||
            LPAD(NVL(S.MIN_EXTENTS, 0), 8) ||
            LPAD(NVL(S.MAX_EXTENTS, 0), 11) ||
            LPAD(NVL(S.FREELISTS, 0), 10) ||
            LPAD(NVL(S.FREELIST_GROUPS, 0), 10) LINE,
            S.OWNER OWNER,
            DECODE(SUBSTR(S.SEGMENT_TYPE, 1, 3), 'LOB', S.LOB_TABLE_NAME,
              S.SEGMENT_NAME) SEGMENT_NAME,
            S.PARTITION_NAME PARTITION_NAME,
            S.SEGMENT_TYPE SEGMENT_TYPE
          FROM
            SEGMENTS S
          )
        ORDER BY
          OWNER,
          SEGMENT_NAME,
          PARTITION_NAME,
          SEGMENT_TYPE DESC
      )
    )
    UNION ALL ( SELECT  ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT  ' ' FROM DUAL )
UNION ALL
( SELECT 'LOB INFORMATION (DBA_LOBS):' FROM DUAL )
UNION ALL
( SELECT  ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('OWNER', 10) ||
    RPAD('TABLE_NAME', 32) ||
    RPAD('COLUMN_NAME', 32) ||
    RPAD('LOB_NAME', 32) ||
    LPAD('PCTVERSION', 11) ||
    LPAD('RETENTION', 10) ||
    LPAD('CACHE', 11) ||
    LPAD('IN_ROW', 7) ||
    RPAD(' LOGGING', 9) ||
    RPAD('SECUREFILE', 11) ||
    RPAD('COMPRESSION', 12) ||
    RPAD('DEDUPLICATION', 14) LINE
  FROM DUAL
)
UNION ALL
( SELECT  ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD(DL.OWNER, 10) ||
    RPAD(DL.TABLE_NAME, 32) ||
    RPAD(DL.COLUMN_NAME, 32) ||
    RPAD(DL.SEGMENT_NAME, 32) ||
    LPAD(NVL(TO_CHAR(DL.PCTVERSION), ' '), 11) ||
    LPAD(NVL(TO_CHAR(DL.RETENTION), ' '), 10) ||
    LPAD(DL.CACHE, 11) ||
    LPAD(DL.IN_ROW, 7) ||
    RPAD(' ' || LOGGING, 9) ||
    RPAD(DL.SECUREFILE, 11) ||
    RPAD(DL.COMPRESSION, 12) ||
    RPAD(DL.DEDUPLICATION, 14) LINE
  FROM
    TABLE_INFO TI,
    DBA_LOBS DL
  WHERE
    TI.TABLE_OWNER = DL.OWNER AND
    TI.TABLE_NAME = DL.TABLE_NAME
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT  ' ' FROM DUAL )
UNION ALL
( SELECT 'PARTITION INFORMATION (DBA_PART_KEY_COLUMNS):' FROM DUAL )
UNION ALL
( SELECT  ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('OWNER', 10) ||
    RPAD('SEGMENT_NAME', 32) ||
    RPAD('SEGMENT_TYPE', 13) ||
    RPAD('COLUMN_NAME', 20) ||
    LPAD('COLUMN_POSITION', 15) ||
    LPAD('PARTITIONING_TYPE', 18) LINE
  FROM DUAL
)
UNION ALL ( SELECT  ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD(OWNER, 10) ||
      RPAD(SEGMENT_NAME, 32) ||
      RPAD(SEGMENT_TYPE, 13) ||
      RPAD(COLUMN_NAME, 20) ||
      LPAD(COLUMN_POSITION, 15) ||
      LPAD(PARTITIONING_TYPE, 18) LINE
    FROM
    ( SELECT /*+ LEADING(TI) */
        PKC.OWNER,
        PKC.NAME SEGMENT_NAME,
        PKC.OBJECT_TYPE SEGMENT_TYPE,
        PKC.COLUMN_NAME,
        PKC.COLUMN_POSITION,
        PT.PARTITIONING_TYPE
      FROM
        TABLE_INFO TI,
        DBA_PART_KEY_COLUMNS PKC,
        DBA_PART_TABLES PT
      WHERE
        TI.TABLE_OWNER = PKC.OWNER AND
        TI.TABLE_NAME = PKC.NAME AND
        PKC.OBJECT_TYPE = 'TABLE' AND
        PT.OWNER = PKC.OWNER AND
        PT.TABLE_NAME = PKC.NAME
      UNION ALL
      ( SELECT /*+ LEADING(TI) */
          PKC.OWNER,
          PKC.NAME SEGMENT_NAME,
          PKC.OBJECT_TYPE SEGMENT_TYPE,
          PKC.COLUMN_NAME,
          PKC.COLUMN_POSITION,
          PI.PARTITIONING_TYPE
        FROM
          INDEX_INFO II,
          DBA_PART_KEY_COLUMNS PKC,
          DBA_PART_INDEXES PI
        WHERE
          II.INDEX_OWNER = PKC.OWNER AND
          II.INDEX_NAME = PKC.NAME AND
          PKC.OBJECT_TYPE = 'INDEX' AND
          PI.OWNER = PKC.OWNER AND
          PI.INDEX_NAME = PKC.NAME
      )
    )
    ORDER BY
      OWNER,
      SEGMENT_NAME,
      COLUMN_POSITION
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT LPAD('*', 240, '*') FROM DUAL )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        'BUFFER POOL OCCUPATION (V$BH):' LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD('SEGMENT_NAME', 35) ||
        RPAD('PARTITION_NAME', 30) ||
        RPAD('SEGMENT_TYPE', 16) ||
        RPAD('POOL', 8) ||
        LPAD('BLKSIZE', 8) ||
        LPAD('POOL_GB', 8) ||
        LPAD('SEG_POOL_MB', 12) ||
        LPAD('POOL_%', 7) ||
        LPAD('SEG_DISK_MB', 12) ||
        LPAD('SEG_CACHED_%', 13) ||
        LPAD('DIRTY_%', 8) LINE
      FROM
        DUAL
    )
    UNION ALL
    ( SELECT ' ' FROM DUAL )
    UNION ALL
    ( SELECT
        RPAD(SEGMENT_NAME, 35) ||
        RPAD(PARTITION_NAME, 30) ||
        RPAD(SEGMENT_TYPE, 16) ||
        RPAD(POOL, 8) ||
        LPAD(BLKSIZE, 8) ||
        LPAD(POOL_GB, 8) ||
        LPAD(SEG_POOL_MB, 12) ||
        LPAD("POOL_%", 7) ||
        LPAD(SEG_DISK_MB, 12) ||
        LPAD("SEG_CACHED_%", 13) ||
        LPAD("DIRTY_%", 8) LINE
      FROM
      ( SELECT
          OWNER,
          SEGMENT_NAME,
          NVL(PARTITION_NAME, ' ') PARTITION_NAME,
          SEGMENT_TYPE,
          BUFFER_POOL POOL,
          BLOCK_SIZE BLKSIZE,
          TO_CHAR(POOL_SIZE_MB / 1024, 990.99) POOL_GB,
          TO_CHAR(BLOCKS * BLOCK_SIZE / 1024 / 1024, 9999990.99) SEG_POOL_MB,
          TO_CHAR(DECODE(POOL_SIZE_MB, 0, 0, BLOCKS * BLOCK_SIZE / 1024 / 1024 /
            POOL_SIZE_MB * 100), 990.99) "POOL_%",
          TO_CHAR(SEG_DISK_BYTE / 1024 / 1024, 9999990.99) SEG_DISK_MB,
          TO_CHAR(DECODE(SEG_DISK_BYTE, 0, 0, BLOCKS * BLOCK_SIZE /
            SEG_DISK_BYTE * 100), 99999990.99) "SEG_CACHED_%",
          TO_CHAR(DECODE(BLOCKS, 0, 0, DIRTY_BLOCKS / BLOCKS * 100),
            990.99) "DIRTY_%"
        FROM
        ( SELECT
            S.OWNER,
            S.SEGMENT_NAME,
            S.PARTITION_NAME,
            S.SEGMENT_TYPE,
            S.BYTES SEG_DISK_BYTE,
            COUNT(*) BLOCKS,
            SUM(DECODE(B.DIRTY, 'Y', 1, 0)) DIRTY_BLOCKS,
            C.POOL_SIZE_MB,
            C.BUFFER_POOL,
            C.BLOCK_SIZE,
            ROW_NUMBER() OVER (PARTITION BY O.DATA_OBJECT_ID
              ORDER BY O.OBJECT_TYPE) CLUSTRN
          FROM
            SEGMENTS S,
            OBJECTS O,
            V$BH B,
            CACHES C
          WHERE
            S.OWNER = O.OWNER AND
            S.SEGMENT_NAME = O.OBJECT_NAME AND
            NVL(S.PARTITION_NAME, ' ') = NVL(O.SUBOBJECT_NAME, ' ') AND
            O.DATA_OBJECT_ID = B.OBJD (+) AND
            C.BUFFER_POOL = S.BUFFER_POOL AND
            C.BLOCK_SIZE = S.BLOCK_SIZE AND
            C.POOL_SIZE_MB > 0
          GROUP BY
            S.OWNER,
            S.SEGMENT_NAME,
            S.PARTITION_NAME,
            S.SEGMENT_TYPE,
            S.BYTES,
            C.POOL_SIZE_MB,
            C.BUFFER_POOL,
            C.BLOCK_SIZE,
            O.DATA_OBJECT_ID,
            O.OBJECT_TYPE
        )
        WHERE
          CLUSTRN = 1
        ORDER BY
          SEG_POOL_MB DESC
      )
      WHERE
        ROWNUM <= 20
    )
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'UNDO STATISTICS (V$UNDOSTAT):' LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('BEGIN_TIME', 19) ||
    LPAD('MAXQUERYLEN', 12) ||
    LPAD('TUNED_UNDORETENTION', 20)
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    *
  FROM
  ( SELECT
      RPAD(TO_CHAR(BEGIN_TIME, 'YYYY-MM-DD HH24:MI:SS'), 19) ||
      LPAD(MAXQUERYLEN, 12) ||
      LPAD(TUNED_UNDORETENTION, 20)
    FROM
      BASIS_INFO BI,
      V$UNDOSTAT UST
    WHERE
      UST.MAXQUERYID = BI.SQL_ID
    ORDER BY
      BEGIN_TIME DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'PATCHES (DBA_REGISTRY_HISTORY):'
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('ACTION_DATE', 21) ||
    RPAD('ACTION', 100)
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      RPAD(TO_CHAR(ACTION_TIME, 'YYYY-MM-DD HH24:MI:SS'), 21) ||
      ACTION || DECODE(VERSION, NULL, '', ' ' || VERSION ) ||
        DECODE(COMMENTS, NULL, '', ' (' || COMMENTS || ')') LINE
    FROM
      DBA_REGISTRY_HISTORY
    ORDER BY
      ACTION_TIME DESC
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'PARAMETER SETTINGS (V$PARAMETER2):' LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    RPAD('PARAMETER_NAME', 40) ||
    RPAD('IS_DEFAULT', 11) ||
    RPAD(' VALUE', 189) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT * FROM
  ( SELECT RPAD(NAME, 40) || RPAD(ISDEFAULT, 11) || RPAD(' ' || VALUE, 189) LINE
    FROM V$PARAMETER2
    WHERE
      NAME LIKE '\_%' ESCAPE '\' OR UPPER(NAME) LIKE 'OPTIMIZER%' OR
      UPPER(NAME) IN ('EVENT', 'DB_FILE_MULTIBLOCK_READ_COUNT',
        'PGA_AGGREGATE_TARGET', 'PGA_AGGREGATE_LIMIT', 'WORKAREA_SIZE_POLICY', 'DB_CACHE_SIZE',
        'SGA_TARGET', 'MEMORY_TARGET', 'MEMORY_MAX_TARGET', 'STAR_TRANSFORMATION_ENABLED',
        'HEAT_MAP', 'INMEMORY_SIZE')
    ORDER BY
      UPPER(NAME),
      VALUE
  )
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT 'PARAMETER CHANGES (DBA_HIST_PARAMETER):' LINE FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('BEGIN_TIME', 19) ||
    RPAD(' PARAMETER_NAME', 41) ||
    RPAD('VALUE', 60) ||
    RPAD('IS_DEFAULT', 11) ||
    RPAD('VALUE_BEFORE', 60) ||
    RPAD('WAS_DEFAULT', 12) LINE
  FROM DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD(BEGIN_TIME, 19) ||
    RPAD(' ' || PARAMETER_NAME, 41) ||
    RPAD(NVL(VALUE, ' '), 60) ||
    RPAD(IS_DEFAULT, 11) ||
    RPAD(NVL(VALUE_BEFORE, ' '), 60) ||
    RPAD(WAS_DEFAULT, 12) LINE
  FROM
  ( SELECT
      DECODE(R.ID, 1, TO_CHAR(BEGIN_INTERVAL_TIME,
        'YYYY-MM-DD HH24:MI:SS'), ' ') BEGIN_TIME,
      DECODE(R.ID, 1, PARAMETER_NAME, ' ') PARAMETER_NAME,
      SUBSTR(VALUE, 1 + 59 * (R.ID - 1), 59) VALUE,
      DECODE(R.ID, 1, IS_DEFAULT, ' ') IS_DEFAULT,
      SUBSTR(VALUE_BEFORE, 1 + 59 * (R.ID - 1), 59) VALUE_BEFORE,
      DECODE(R.ID, 1, WAS_DEFAULT, ' ') WAS_DEFAULT
    FROM
    ( SELECT ROWNUM ID FROM V$SESSTAT WHERE ROWNUM <= 20 ) R,
    ( SELECT
        HSS.BEGIN_INTERVAL_TIME,
        HP2.PARAMETER_NAME PARAMETER_NAME,
        HP2.VALUE VALUE,
        NVL(HP2.ISDEFAULT, 'UNKNOWN') IS_DEFAULT,
        HP1.VALUE VALUE_BEFORE,
        NVL(HP1.ISDEFAULT, 'UNKNOWN') WAS_DEFAULT
      FROM
        V$INSTANCE I,
        DBA_HIST_PARAMETER HP1,
        DBA_HIST_PARAMETER HP2,
        DBA_HIST_SNAPSHOT HSS
      WHERE
        I.INSTANCE_NUMBER = HP1.INSTANCE_NUMBER AND
        I.INSTANCE_NUMBER = HP2.INSTANCE_NUMBER AND
        I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
        HP2.SNAP_ID = HSS.SNAP_ID AND
        HP1.SNAP_ID = HP2.SNAP_ID - 1 AND
        HP1.PARAMETER_NAME = HP2.PARAMETER_NAME AND
        ( HP2.VALUE != HP1.VALUE OR HP2.ISDEFAULT != HP1.ISDEFAULT )
      UNION
      ( SELECT
          HSS.BEGIN_INTERVAL_TIME,
          HP2.PARAMETER_NAME, HP2.VALUE,
          NVL(HP2.ISDEFAULT, 'UNKNOWN') IS_DEFAULT,
          NULL VALUE_BEFORE,
          'TRUE' WAS_DEFAULT
        FROM
          V$INSTANCE I,
          DBA_HIST_PARAMETER HP2,
          DBA_HIST_SNAPSHOT HSS
        WHERE
          I.INSTANCE_NUMBER = HP2.INSTANCE_NUMBER AND
          I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
          HP2.SNAP_ID = HSS.SNAP_ID AND
          EXISTS
          ( SELECT
              *
            FROM
              DBA_HIST_PARAMETER HP1
            WHERE
              I.INSTANCE_NUMBER = HP1.INSTANCE_NUMBER AND
              HP1.SNAP_ID = HP2.SNAP_ID - 1 AND
              HP1.PARAMETER_NAME = 'sessions'
          ) AND
          NOT EXISTS
          ( SELECT
              *
            FROM
              DBA_HIST_PARAMETER HP1
            WHERE
              I.INSTANCE_NUMBER = HP1.INSTANCE_NUMBER AND
              HP1.SNAP_ID = HP2.SNAP_ID - 1 AND
              HP1.PARAMETER_NAME = HP2.PARAMETER_NAME
          )
      )
      UNION
      ( SELECT
          HSS.BEGIN_INTERVAL_TIME,
          HP1.PARAMETER_NAME,
          NULL VALUE,
          'TRUE' IS_DEFAULT,
          HP1.VALUE VALUE_BEFORE,
          NVL(HP1.ISDEFAULT, 'UNKNOWN') WAS_DEFAULT
        FROM
          V$INSTANCE I,
          DBA_HIST_PARAMETER HP1,
          DBA_HIST_SNAPSHOT HSS
        WHERE
          I.INSTANCE_NUMBER = HP1.INSTANCE_NUMBER AND
          I.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
          HP1.SNAP_ID = HSS.SNAP_ID AND
          EXISTS
          ( SELECT
              *
            FROM
              DBA_HIST_PARAMETER HP2
            WHERE
              I.INSTANCE_NUMBER = HP2.INSTANCE_NUMBER AND
              HP1.SNAP_ID = HP2.SNAP_ID - 1 AND
              HP2.PARAMETER_NAME = 'sessions'
          ) AND
          NOT EXISTS
          ( SELECT
              *
            FROM
              DBA_HIST_PARAMETER HP2
            WHERE
              I.INSTANCE_NUMBER = HP2.INSTANCE_NUMBER AND
              HP1.SNAP_ID = HP2.SNAP_ID - 1 AND
              HP1.PARAMETER_NAME = HP2.PARAMETER_NAME
          )
      )
    ) P
    WHERE
      R.ID <= TRUNC(LENGTH(P.VALUE) - 1) / 59 + 1 OR
      R.ID <= TRUNC(LENGTH(P.VALUE_BEFORE) - 1) / 59 + 1 OR
      R.ID <= 1
    ORDER BY
      P.BEGIN_INTERVAL_TIME DESC,
      P.PARAMETER_NAME,
      R.ID
  ),
  BASIS_INFO BI
  WHERE ROWNUM <= BI.NUM_CAPTURE_TIMES
)
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'BIND VALUES (V$SQL_BIND_CAPTURE, DBA_HIST_SQLBIND):'
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    'SAMPLES: ' || COUNT(DISTINCT(CAPTURE_TIME)) LINE
  FROM
    BIND_CONTENTS
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('CAPTURE_TIME', 19) ||
    LPAD('NAME', 10) ||
    RPAD(' VALUE', 80)
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    *
  FROM
  ( SELECT
      RPAD(CAPTURE_TIME, 19) ||
      LPAD(NAME, 10) ||
      RPAD(' ' || VALUE_STRING, 80)
    FROM
    ( SELECT
        DECODE(ROWNUM, 1, 'CONSTANT', ' ') CAPTURE_TIME,
        NAME,
        VALUE_STRING
      FROM
      ( SELECT
          NAME,
          '''' || EXAMPLE_VALUE || '''' VALUE_STRING
        FROM
          DISTINCT_LITERALS
        WHERE
          NUM_DISTINCT = 1
        ORDER BY
          POSITION
      )
      UNION ALL ( SELECT NULL, NULL, NULL FROM DUAL )
      UNION ALL
      ( SELECT
            CAPTURE_TIME,
            NAME,
            VALUE_STRING
        FROM
        ( SELECT
            DECODE(CAPTURE_TIME, LAG(CAPTURE_TIME, 1) OVER
              (ORDER BY CAPTURE_TIME DESC, BC.POSITION),
              ' ', TO_CHAR(CAPTURE_TIME, 'YYYY-MM-DD HH24:MI:SS')) CAPTURE_TIME,
            BC.NAME NAME,
            '''' || VALUE_STRING || '''' VALUE_STRING,
            BI.NUM_CAPTURE_TIMES,
            NC.NUM_NOT_CONSTANT
          FROM
            BASIS_INFO BI,
            BIND_CONTENTS BC,
            DISTINCT_LITERALS DL,
            ( SELECT COUNT(*) NUM_NOT_CONSTANT FROM DISTINCT_LITERALS WHERE NUM_DISTINCT > 1 ) NC
          WHERE
            BC.NAME = DL.NAME AND
            DL.NUM_DISTINCT > 1
          ORDER BY
            BC.CAPTURE_TIME DESC,
            BC.POSITION
        )
         WHERE
            NUM_CAPTURE_TIMES = -1 OR ROWNUM <= NUM_CAPTURE_TIMES * NUM_NOT_CONSTANT
      )
    )
  )
)
UNION ALL ( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT LPAD('*', 240, '*') FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT 'SQL MONITORING (V$SQL_MONITOR, V$SQL_PLAN_MONITOR):' FROM DUAL )
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('SID', 6) ||
    RPAD(' SQL_EXEC_ID', 13) ||
    RPAD('STATUS', 16) ||
    RPAD('SQL_EXEC_START', 19) ||
    LPAD('ELAPSED_S', 10) ||
    LPAD('CPU_S', 8) ||
    LPAD('BUFFER_GETS', 12) ||
    LPAD('DISK_READS', 11) ||
    LPAD('PX_REQ', 7) ||
    LPAD('PX_ALLOC', 9) ||
    RPAD(' ERR_MSG', 20) LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      LPAD(SM.SID, 6) ||
      RPAD(' ' || SM.SQL_EXEC_ID, 13) ||
      RPAD(SM.STATUS, 16) ||
      RPAD(TO_CHAR(SM.SQL_EXEC_START, 'dd.mm.yyyy hh24:mi:ss'), 19) ||
      LPAD(ROUND(SM.ELAPSED_TIME / 1000000), 10) ||
      LPAD(ROUND(SM.CPU_TIME / 1000000), 8) ||
      LPAD(SM.BUFFER_GETS, 12) ||
      LPAD(SM.DISK_READS, 11) ||
      LPAD(NVL(TO_CHAR(SM.PX_SERVERS_REQUESTED), ' '), 7) ||
      LPAD(NVL(TO_CHAR(SM.PX_SERVERS_ALLOCATED), ' '), 9) ||
      RPAD(' ' || SUBSTR(SM.ERROR_MESSAGE, 1, INSTR(SM.ERROR_MESSAGE, ':') - 1), 20) LINE
    FROM
      BASIS_INFO BI,
      V$SQL_MONITOR SM
    WHERE
      SM.SQL_ID = BI.SQL_ID
    ORDER BY
      SM.SQL_EXEC_START DESC,
      SM.SID,
      SM.SQL_EXEC_ID
  ),
  BASIS_INFO BI
  WHERE ROWNUM <= BI.NUM_CAPTURE_TIMES
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('SID', 6) ||
    RPAD(' SQL_EXEC_ID', 13) ||
    RPAD('PLAN_ID', 8) ||
    LPAD('STARTS', 10) ||
    LPAD('OUTPUT_ROWS', 12) ||
    LPAD('IO_READ_MB', 11) ||
    LPAD('WA_TEMP_MB', 11) ||
    ' ACTION_INFO' LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      DENSE_RANK() over (ORDER BY SQL_EXEC_ID DESC) AS rank_val,
      LPAD(DECODE(SPM.PLAN_LINE_ID, 0, TO_CHAR(SPM.SID), ' '), 6) ||
      RPAD(' ' || DECODE(SPM.PLAN_LINE_ID, 0, TO_CHAR(SPM.SQL_EXEC_ID), ' '), 13) ||
      RPAD(TO_CHAR(SPM.PLAN_LINE_ID), 8) ||
      LPAD(TO_CHAR(SPM.STARTS), 10) ||
      LPAD(TO_CHAR(SPM.OUTPUT_ROWS), 12) ||
      LPAD(TO_CHAR(SPM.PHYSICAL_READ_BYTES / 1024 / 1024, 999999990), 11) ||
      LPAD(NVL(TO_CHAR(SPM.WORKAREA_MAX_TEMPSEG / 1024 / 1024, 99999990), ' '), 11) ||
      LPAD(' ', SPM.PLAN_DEPTH + 1, ' ') ||
        SPM.PLAN_OPERATION ||
        DECODE(SPM.PLAN_OPTIONS, NULL, NULL, ' ' || SPM.PLAN_OPTIONS ||
        DECODE(SPM.PLAN_OBJECT_NAME, NULL, NULL, ' (' || SPM.PLAN_OBJECT_NAME || ')')) LINE
    FROM
      BASIS_INFO BI,
      V$SQL_PLAN_MONITOR SPM
    WHERE
      SPM.SQL_ID = BI.SQL_ID
    ORDER BY
      SPM.SQL_EXEC_START DESC,
      SPM.SID,
      SPM.SQL_EXEC_ID,
      SPM.PLAN_LINE_ID
  ),
  BASIS_INFO BI
  WHERE rank_val <= BI.NUM_CAPTURE_TIMES
)
/* Disabling because of parse loop, Oracle bug 13423574: LONG PARSING ON QUERY INCLUDING XMLTABLE, fixed with SBP 05/2013 for 11.2.0.2 and 11.2.0.3
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LPAD('SID', 6) ||
    RPAD(' SQL_EXEC_ID', 13) ||
    RPAD('SQL_EXEC_START', 20) ||
    RPAD('NAME', 10) ||
    'VALUE_STRING' LINE
  FROM
    DUAL
)
UNION ALL
( SELECT ' ' FROM DUAL )
UNION ALL
( SELECT
    LINE
  FROM
  ( SELECT
      LPAD(DECODE(BV.POS, 1, TO_CHAR(SMX.SID), ' '), 6) ||
      RPAD(' ' || DECODE(BV.POS, 1, TO_CHAR(SMX.SQL_EXEC_ID), ' '), 13) ||
      RPAD(DECODE(BV.POS, 1, TO_CHAR(SMX.SQL_EXEC_START, 'dd.mm.yyyy hh24:mi:ss'), ' '), 20) ||
      RPAD(BV.NAME, 10) ||
      '''' || BV.VALUE || '''' LINE
    FROM
      V$SQL_MONITOR SMX,
      XMLTABLE
      ( '/binds/bind'
        PASSING XMLTYPE(SMX.BINDS_XML)
        COLUMNS NAME VARCHAR2(30) PATH '@name',
                VALUE VARCHAR2(4000) PATH '.',
                TYPE VARCHAR2(15) PATH '@dtystr',
                POS NUMBER PATH '@pos'
      ) BV
    WHERE
      SMX.BINDS_XML IS NOT NULL AND
      SMX.SQL_ID = '<SQL_ID>'       /********** EDIT HERE 2/2; there is another one above ******************/
    ORDER BY
      SMX.SQL_EXEC_START DESC,
      SMX.SID,
      SMX.SQL_EXEC_ID,
      BV.POS
  )
)
*/
)
));

