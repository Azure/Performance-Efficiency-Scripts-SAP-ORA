SELECT /*+ OPT_PARAM('_PUSH_JOIN_PREDICATE', 'FALSE' */ /* CURRENT_ROW# */
  NULL SAMPLE_TIME, NULL INST, NULL SID, NULL PROGRAM, NULL ACTION, NULL SQL_ID,
  NULL ENQ_TYPE, NULL ENQ_REQUEST, NULL ROW_WAIT_OBJ#, NULL ROW_WAIT_FILE#,
  NULL ROW_WAIT_BLOCK#, NULL CURRENT_ROW#
FROM DUAL WHERE 1 = 0
UNION ALL (
SELECT NULL SAMPLE_TIME, NULL INST, NULL SID, NULL PROGRAM, NULL ACTION, NULL SQL_ID,
  NULL ENQ_TYPE, NULL ENQ_REQUEST, NULL ROW_WAIT_OBJ#, NULL ROW_WAIT_FILE#,
  NULL ROW_WAIT_BLOCK#, NULL CURRENT_ROW#
FROM DUAL WHERE 1 = 0
) UNION ALL ( SELECT * FROM (
WITH BASIS_INFO AS
( SELECT /*+ MATERIALIZE */
    DECODE(DBID, -1, OWN_DBID, DBID) DBID,
    DECODE(INSTANCE_NUMBER, -1, USERENV('INSTANCE'), INSTANCE_NUMBER) INSTANCE_NUMBER,
    BEGIN_DATE,
    END_DATE,
    TO_TIMESTAMP(TO_CHAR(BEGIN_DATE, 'dd.mm.yyyy hh24:mi:ss'),
      'dd.mm.yyyy hh24:mi:ss') BEGIN_TIME,
    TO_TIMESTAMP(TO_CHAR(END_DATE, 'dd.mm.yyyy hh24:mi:ss'),
      'dd.mm.yyyy hh24:mi:ss') END_TIME,
    BEGIN_SNAP_ID,
    END_SNAP_ID,
    BLOCKED_SQL_ID,
    EVENT,
    DATA_SOURCE
  FROM
  ( SELECT
      -1 DBID,
      -2 INSTANCE_NUMBER,
      TO_DATE('<FROM YYYY-MM-DD HH24:MI>', 'YYYY-MM-DD HH24:MI:SS') BEGIN_DATE,             /********** EDIT HERE 1/2; example: 2021-09-31 09:50 ******************/
      TO_DATE('<To YYYY-MM-DD HH24:MI>', 'YYYY-MM-DD HH24:MI:SS')   END_DATE,               /********** EDIT HERE 2/2; example: 2021-09-31 10:00 ******************/
      -1 BEGIN_SNAP_ID,
        /* explicit SNAP_IDs sometimes required for ASH partition pruning */
      -1 END_SNAP_ID,
      '%' BLOCKED_SQL_ID,
      '%' EVENT,
      'AWR' DATA_SOURCE
        /* AWR, CURRENT */
    FROM
      DUAL
  ),
  ( SELECT DBID OWN_DBID FROM V$DATABASE )
),
SNAPSHOTS AS
( SELECT
    HSS.DBID,
    HSS.INSTANCE_NUMBER,
    MIN(HSS.SNAP_ID) BEGIN_SNAP_ID,
    MIN(HSS.BEGIN_INTERVAL_TIME) BEGIN_TIME,
    MAX(HSS.SNAP_ID) END_SNAP_ID,
    MAX(HSS.END_INTERVAL_TIME) END_TIME
  FROM
    DBA_HIST_SNAPSHOT HSS,
    BASIS_INFO BI
  WHERE
    HSS.DBID = BI.DBID AND
    HSS.END_INTERVAL_TIME >= BI.BEGIN_TIME AND
    HSS.BEGIN_INTERVAL_TIME <= BI.END_TIME AND
    ( BI.BEGIN_SNAP_ID = -1 OR
      HSS.SNAP_ID >= BI.BEGIN_SNAP_ID ) AND
    ( BI.END_SNAP_ID = -1 OR
      HSS.SNAP_ID <= BI.END_SNAP_ID ) AND
    ( BI.INSTANCE_NUMBER = -2 OR
      HSS.INSTANCE_NUMBER = BI.INSTANCE_NUMBER )
  GROUP BY
    HSS.DBID,
    HSS.INSTANCE_NUMBER
),
BLOCKED_SESSIONS AS
( SELECT /*+ MATERIALIZE */
    ASH.SAMPLE_TIME,
    ASH.SAMPLE_ID,
    ASH.INST_ID,
    ASH.SESSION_ID,
    ASH.BLOCKING_INST_ID,
    ASH.BLOCKING_SESSION BLOCKING_SESSION_ID,
    DECODE(ASH.SESSION_STATE, 'WAITING', ASH.EVENT, 'CPU') ACTION,
    ASH.P1,
    ASH.P2,
    ASH.P3,
    ASH.PROGRAM,
    ASH.SQL_ID,
    ASH.CURRENT_OBJ# ROW_WAIT_OBJ#,
    ASH.CURRENT_FILE# ROW_WAIT_FILE#,
    ASH.CURRENT_BLOCK# ROW_WAIT_BLOCK#,
    ASH.CURRENT_ROW# ROW_WAIT_ROW#
  FROM
    BASIS_INFO BI,
    GV$ACTIVE_SESSION_HISTORY ASH
  WHERE
    ( BI.INSTANCE_NUMBER = -2 OR BI.INSTANCE_NUMBER = ASH.INST_ID ) AND
    ASH.SAMPLE_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
    BI.DATA_SOURCE = 'CURRENT' AND
    ASH.BLOCKING_SESSION IS NOT NULL
  UNION ALL
  ( SELECT
      ASH.SAMPLE_TIME,
      ASH.SAMPLE_ID,
      ASH.INSTANCE_NUMBER INST_ID,
      ASH.SESSION_ID,
      ASH.BLOCKING_INST_ID,
      ASH.BLOCKING_SESSION BLOCKING_SESSION_ID,
      DECODE(ASH.SESSION_STATE, 'WAITING', ASH.EVENT, 'CPU') ACTION,
      ASH.P1,
      ASH.P2,
      ASH.P3,
      ASH.PROGRAM,
      ASH.SQL_ID,
      ASH.CURRENT_OBJ# ROW_WAIT_OBJ#,
      ASH.CURRENT_FILE# ROW_WAIT_FILE#,
      ASH.CURRENT_BLOCK# ROW_WAIT_BLOCK#,
      ASH.CURRENT_ROW# ROW_WAIT_ROW#
    FROM
      BASIS_INFO BI,
      SNAPSHOTS SS,
      DBA_HIST_ACTIVE_SESS_HISTORY ASH
    WHERE
      ASH.DBID = BI.DBID AND
      ( BI.INSTANCE_NUMBER = -2 OR BI.INSTANCE_NUMBER = ASH.INSTANCE_NUMBER ) AND
      ASH.SNAP_ID BETWEEN SS.BEGIN_SNAP_ID AND SS.END_SNAP_ID AND
      ASH.SAMPLE_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      BI.DATA_SOURCE = 'AWR' AND
      ASH.BLOCKING_SESSION IS NOT NULL
  )
),
BLOCKING_SESSIONS AS
( SELECT DISTINCT /*+ MATERIALIZE */
    BS.SAMPLE_TIME,
    BS.SAMPLE_ID,
    BS.BLOCKING_INST_ID INST_ID,
    BS.BLOCKING_SESSION_ID SESSION_ID,
    ASH.BLOCKING_INST_ID,
    ASH.BLOCKING_SESSION BLOCKING_SESSION_ID,
    DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE', 'WAITING', ASH.EVENT, 'CPU') ACTION,
    ASH.P1,
    ASH.P2,
    ASH.P3,
    NVL(ASH.PROGRAM, S.PROGRAM || ' (?)') PROGRAM,
    ASH.SQL_ID,
    ASH.CURRENT_OBJ# ROW_WAIT_OBJ#,
    ASH.CURRENT_FILE# ROW_WAIT_FILE#,
    ASH.CURRENT_BLOCK# ROW_WAIT_BLOCK#,
    ASH.CURRENT_ROW# ROW_WAIT_ROW#
  FROM
    BASIS_INFO BI,
    BLOCKED_SESSIONS BS,
    GV$SESSION S,
    GV$ACTIVE_SESSION_HISTORY ASH
  WHERE
    BS.SAMPLE_TIME = ASH.SAMPLE_TIME (+) AND
    BS.BLOCKING_SESSION_ID = ASH.SESSION_ID (+) AND
    BS.BLOCKING_SESSION_ID = S.SID (+) AND
    BS.BLOCKING_INST_ID = ASH.INST_ID (+) AND
    BS.BLOCKING_INST_ID = S.INST_ID (+) AND
    BI.DATA_SOURCE = 'CURRENT'
  UNION ALL
  ( SELECT DISTINCT
      BS.SAMPLE_TIME,
      BS.SAMPLE_ID,
      BS.BLOCKING_INST_ID INST_ID,
      BS.BLOCKING_SESSION_ID SESSION_ID,
      ASH.BLOCKING_INST_ID,
      ASH.BLOCKING_SESSION BLOCKING_SESSION_ID,
      DECODE(ASH.SESSION_STATE, NULL, 'INACTIVE', 'WAITING', ASH.EVENT, 'CPU') ACTION,
      ASH.P1,
      ASH.P2,
      ASH.P3,
      NVL(ASH.PROGRAM, S.PROGRAM || ' (?)') PROGRAM,
      ASH.SQL_ID,
      ASH.CURRENT_OBJ# ROW_WAIT_OBJ#,
      ASH.CURRENT_FILE# ROW_WAIT_FILE#,
      ASH.CURRENT_BLOCK# ROW_WAIT_BLOCK#,
      ASH.CURRENT_ROW# ROW_WAIT_ROW#
    FROM
      BASIS_INFO BI,
      SNAPSHOTS SS,
      BLOCKED_SESSIONS BS,
      GV$SESSION S,
      DBA_HIST_ACTIVE_SESS_HISTORY ASH
    WHERE
      BS.SAMPLE_TIME = ASH.SAMPLE_TIME (+) AND
      BS.BLOCKING_SESSION_ID = ASH.SESSION_ID (+) AND
      BS.BLOCKING_SESSION_ID = S.SID (+) AND
      BS.BLOCKING_INST_ID = ASH.INSTANCE_NUMBER (+) AND
      BS.BLOCKING_INST_ID = S.INST_ID (+) AND
      BI.DATA_SOURCE = 'AWR'
  )
),
ALL_RELEVANT_SESSIONS AS
( SELECT
    *
  FROM
    BLOCKED_SESSIONS
  UNION
  ( SELECT
      *
    FROM
      BLOCKING_SESSIONS
  )
),
RELEVANT_SAMPLE_TIMES AS
( SELECT /*+MATERIALIZE*/ /*prevent ORA-32034*/ DISTINCT
    S.SAMPLE_TIME,
    S.SAMPLE_ID
  FROM
    BASIS_INFO BI,
    ALL_RELEVANT_SESSIONS S
  WHERE
    S.BLOCKING_SESSION_ID IS NOT NULL AND
    NVL(S.SQL_ID, ' ') LIKE BI.BLOCKED_SQL_ID AND
    NVL(S.ACTION, ' ') LIKE BI.EVENT
)
SELECT
  DECODE(LAG(SAMPLE_TIME, 1) OVER (ORDER BY RN), SAMPLE_TIME, NULL,
    TO_CHAR(SAMPLE_TIME, 'dd.mm.yyyy hh24:mi:ss')) SAMPLE_TIME,
  INST_ID INST,
  SID,
  PROGRAM,
  ACTION,
  SQL_ID,
  ENQ_TYPE,
  ENQ_REQUEST,
  TO_CHAR(ROW_WAIT_OBJ#, 999999999990) ROW_WAIT_OBJ#,
  TO_CHAR(ROW_WAIT_FILE#, 9999999999990) ROW_WAIT_FILE#,
  TO_CHAR(ROW_WAIT_BLOCK#, 99999999999990) ROW_WAIT_BLOCK#,
  TO_CHAR(ROW_WAIT_ROW#, 999999999990) ROW_WAIT_ROW#
FROM
( SELECT
    S.SAMPLE_TIME,
    substr(rpad(' ',2*(level-1)+1,decode(user,'SYS','.',' ')),2)||S.SESSION_ID SID,
    TO_CHAR(S.INST_ID, 990) INST_ID,
    S.PROGRAM,
    S.ACTION,
    S.SQL_ID,
    DECODE(SUBSTR(S.ACTION, 1, 4), 'enq:', CHR(BITAND(P1, -16777216) / 16777215) ||
      CHR(BITAND(P1, 16711680) / 65535), NULL) ENQ_TYPE,
    DECODE(SUBSTR(S.ACTION, 1, 4), 'enq:', DECODE(BITAND(S.P1, 65535), 4, '4 (Shared)',
      6, '6 (Exclusive)', BITAND(S.P1, 65535)), NULL) ENQ_REQUEST,
    DECODE(S.ACTION, 'enq: TX - row lock contention', S.ROW_WAIT_OBJ#, NULL) ROW_WAIT_OBJ#,
    DECODE(S.ACTION, 'enq: TX - row lock contention', S.ROW_WAIT_FILE#, NULL) ROW_WAIT_FILE#,
    DECODE(S.ACTION, 'enq: TX - row lock contention', S.ROW_WAIT_BLOCK#, NULL) ROW_WAIT_BLOCK#,
    DECODE(S.ACTION, 'enq: TX - row lock contention', S.ROW_WAIT_ROW#, NULL) ROW_WAIT_ROW#,
    ROWNUM RN
  FROM
    ALL_RELEVANT_SESSIONS S,
    RELEVANT_SAMPLE_TIMES T
  WHERE
    S.SAMPLE_ID = T.SAMPLE_ID
  CONNECT BY
    PRIOR S.SAMPLE_ID = S.SAMPLE_ID AND
    PRIOR S.SESSION_ID = S.BLOCKING_SESSION_ID AND
    PRIOR S.INST_ID = S.BLOCKING_INST_ID
  START WITH
    S.BLOCKING_SESSION_ID IS NULL AND
    S.BLOCKING_INST_ID IS NULL
) S
ORDER BY
  S.SAMPLE_TIME DESC,
  RN
));

