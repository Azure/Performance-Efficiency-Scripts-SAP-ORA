SELECT
  AWR.SNAP_ID,
  concat('->',to_char(end_interval_time+1/288,
      'YY-MM-DD  HH24:MI')) date_time,
  to_char(end_interval_time,'YYYY-IW') week,
  to_char(end_interval_time,'DY') day,
  to_char(end_interval_time,'yyyy-mm-dd') date_,
  concat('->',to_char(end_interval_time+1/288,
      'HH24:MI')) time,    
  TO_CHAR(ROUND(ASH.ASH_FG_SAMPLES * 10 / AWR.INTERVAL_SECONDS, 2), 990.99) ASH_FG,
  TO_CHAR(ROUND(ASH.ASH_BG_SAMPLES * 10 / AWR.INTERVAL_SECONDS, 2), 990.99) ASH_BG,
  TO_CHAR(ROUND((ASH.ASH_BG_SAMPLES + ASH.ASH_FG_SAMPLES) * 10 /
    AWR.INTERVAL_SECONDS, 2), 99990.99) ASH_TOTAL,
  TO_CHAR(ROUND(AWR.SYSSTAT_S / AWR.INTERVAL_SECONDS, 2), 990.99) SYSSTAT,
  TO_CHAR(ROUND(AWR.SYS_TIME_MODEL_S / AWR.INTERVAL_SECONDS, 2), 990.99) SYS_TIME_MODEL,
  TO_CHAR(ROUND(AWR.OSSTAT_USER_S / AWR.INTERVAL_SECONDS, 2), 990.99) OS_USER,
  TO_CHAR(ROUND(AWR.OSSTAT_SYS_S / AWR.INTERVAL_SECONDS, 2), 990.99) OS_SYS,
  TO_CHAR(ROUND(AWR.OSSTAT_IDLE_S / AWR.INTERVAL_SECONDS, 2), 990.99) OS_IDLE,
  TO_CHAR(ROUND(AWR.OSSTAT_IO_S / AWR.INTERVAL_SECONDS, 2), 990.99) OS_IO,
  TO_CHAR(ROUND(AWR.OSSTAT_TOTAL_S / AWR.INTERVAL_SECONDS, 2), 9990.99) OS_TOTAL,
  TO_CHAR(ROUND((AWR.OSSTAT_TOTAL_S-AWR.OSSTAT_IDLE_S-AWR.OSSTAT_IO_S) / AWR.INTERVAL_SECONDS, 2), 9999990.99) OS_NON_IDLE,
  AWR.INSTANCE_NUMBER inst_id
FROM
( SELECT
    SNAP_ID,
    INSTANCE_NUMBER,
    BEGIN_INTERVAL_TIME,
    END_INTERVAL_TIME,
    INTERVAL_SECONDS,
    DECODE(RESTART, 'YES', SYSSTAT_ABS_S, SYSSTAT_ABS_S -
      LAG(SYSSTAT_ABS_S, 1) OVER (PARTITION BY INSTANCE_NUMBER ORDER BY SNAP_ID)) SYSSTAT_S,
    DECODE(RESTART, 'YES', SYS_TIME_MODEL_ABS_S, SYS_TIME_MODEL_ABS_S -
      LAG(SYS_TIME_MODEL_ABS_S, 1) OVER (PARTITION BY INSTANCE_NUMBER ORDER BY SNAP_ID)) SYS_TIME_MODEL_S,
    DECODE(RESTART, 'YES', OSSTAT_ABS_TOTAL_S, OSSTAT_ABS_TOTAL_S -
      LAG(OSSTAT_ABS_TOTAL_S, 1) OVER (PARTITION BY INSTANCE_NUMBER ORDER BY SNAP_ID)) OSSTAT_TOTAL_S,
    DECODE(RESTART, 'YES', OSSTAT_ABS_IDLE_S, OSSTAT_ABS_IDLE_S -
      LAG(OSSTAT_ABS_IDLE_S, 1) OVER (PARTITION BY INSTANCE_NUMBER ORDER BY SNAP_ID)) OSSTAT_IDLE_S,
    DECODE(RESTART, 'YES', OSSTAT_ABS_USER_S, OSSTAT_ABS_USER_S -
      LAG(OSSTAT_ABS_USER_S, 1) OVER (PARTITION BY INSTANCE_NUMBER ORDER BY SNAP_ID)) OSSTAT_USER_S,
    DECODE(RESTART, 'YES', OSSTAT_ABS_SYS_S, OSSTAT_ABS_SYS_S -
      LAG(OSSTAT_ABS_SYS_S, 1) OVER (PARTITION BY INSTANCE_NUMBER ORDER BY SNAP_ID)) OSSTAT_SYS_S,
    DECODE(RESTART, 'YES', OSSTAT_ABS_IO_S, OSSTAT_ABS_IO_S -
      LAG(OSSTAT_ABS_IO_S, 1) OVER (PARTITION BY INSTANCE_NUMBER ORDER BY SNAP_ID)) OSSTAT_IO_S
  FROM
  ( SELECT
      HSS.SNAP_ID SNAP_ID,
      HSS.INSTANCE_NUMBER INSTANCE_NUMBER,
      HSS.BEGIN_INTERVAL_TIME BEGIN_INTERVAL_TIME,
      HSS.END_INTERVAL_TIME END_INTERVAL_TIME,
      HSS.INTERVAL_SECONDS INTERVAL_SECONDS,
      HSS.RESTART RESTART,
      ROUND(HSY.VALUE / 100) SYSSTAT_ABS_S,
      ROUND(HSTM.VALUE / 1000000) SYS_TIME_MODEL_ABS_S,
      ROUND(SUM(DECODE(HOS.STAT_NAME, 'IDLE_TIME', HOS.VALUE, 'USER_TIME', HOS.VALUE,
        'SYS_TIME', HOS.VALUE, 0)) / 100) OSSTAT_ABS_TOTAL_S,
      ROUND(SUM(DECODE(HOS.STAT_NAME, 'IDLE_TIME', HOS.VALUE, 0)) / 100 -
            SUM(DECODE(HOS.STAT_NAME, 'IOWAIT_TIME', HOS.VALUE, 0)) / 100) OSSTAT_ABS_IDLE_S,
      ROUND(SUM(DECODE(HOS.STAT_NAME, 'USER_TIME', HOS.VALUE, 0)) / 100) OSSTAT_ABS_USER_S,
      ROUND(SUM(DECODE(HOS.STAT_NAME, 'SYS_TIME', HOS.VALUE, 0)) / 100) OSSTAT_ABS_SYS_S,
      ROUND(SUM(DECODE(HOS.STAT_NAME, 'IOWAIT_TIME', HOS.VALUE, 0)) / 100) OSSTAT_ABS_IO_S
    FROM
      DBA_HIST_OSSTAT HOS,
      DBA_HIST_SYSSTAT HSY,
      DBA_HIST_SYS_TIME_MODEL HSTM,  
      ( SELECT DISTINCT
          HSS2.SNAP_ID,
          HSS2.INSTANCE_NUMBER INSTANCE_NUMBER,
          HSS2.BEGIN_INTERVAL_TIME,
          HSS2.END_INTERVAL_TIME,
          TO_CHAR(HSS2.END_INTERVAL_TIME, 'SSSSS') -
            TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'SSSSS') +
            86400 * (TO_CHAR(HSS2.END_INTERVAL_TIME, 'J') -
                     TO_CHAR(HSS2.BEGIN_INTERVAL_TIME, 'J'))
            INTERVAL_SECONDS,
          DECODE(HSS2.STARTUP_TIME, HSS1.STARTUP_TIME, 'NO', 'YES') RESTART
        FROM
          DBA_HIST_SNAPSHOT HSS1, DBA_HIST_SNAPSHOT HSS2
        WHERE
          HSS1.SNAP_ID = HSS2.SNAP_ID - 1 and
          HSS1.INSTANCE_NUMBER = HSS2.INSTANCE_NUMBER
      ) HSS
    WHERE
      HOS.SNAP_ID = HSS.SNAP_ID AND
      HSY.SNAP_ID = HSS.SNAP_ID AND
      HSTM.SNAP_ID = HSS.SNAP_ID AND
      HSY.STAT_NAME = 'CPU used by this session' AND
      HSTM.STAT_NAME = 'DB CPU' AND
      HOS.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSY.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER AND
      HSTM.INSTANCE_NUMBER = HSS.INSTANCE_NUMBER
    GROUP BY
      HSS.SNAP_ID,
      HSS.INSTANCE_NUMBER,
      HSS.BEGIN_INTERVAL_TIME,
      HSS.END_INTERVAL_TIME,
      HSS.INTERVAL_SECONDS,
      HSS.RESTART,
      HSY.VALUE,
      HSTM.VALUE
  )
) AWR,
( SELECT
    ASH.SNAP_ID SNAP_ID,
    ASH.INSTANCE_NUMBER INSTANCE_NUMBER,
    SUM(DECODE(ASH.SESSION_TYPE, 'FOREGROUND', 1, 0)) ASH_FG_SAMPLES,
    SUM(DECODE(ASH.SESSION_TYPE, 'BACKGROUND', 1, 0)) ASH_BG_SAMPLES
  FROM
    DBA_HIST_ACTIVE_SESS_HISTORY ASH
  WHERE
    ASH.SESSION_STATE = 'ON CPU' and
    ash.program not like decode(upper('n'),
      'Y','%DBW%',
      'NoThInG')
  GROUP BY
    ASH.SNAP_ID,
    ASH.INSTANCE_NUMBER
) ASH
WHERE
  AWR.SNAP_ID = ASH.SNAP_ID AND
  AWR.INSTANCE_NUMBER = ASH.INSTANCE_NUMBER AND
  AWR.SYSSTAT_S IS NOT NULL
ORDER BY
  AWR.SNAP_ID DESC;

